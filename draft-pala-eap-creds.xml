<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' [

    <!-- Normative References -->
    <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!-- <!ENTITY rfc3986 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml'> -->
    <!-- <!ENTITY rfc4501 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4501.xml'> -->
    <!ENTITY rfc3748 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3748.xml'>
    <!ENTITY rfc4210 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4210.xml'>
    <!-- <!ENTITY rfc5019 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5019.xml'> -->
    <!-- <!ENTITY rfc5234 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'> -->
    <!ENTITY rfc5272 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5272.xml'>
    <!ENTITY rfc5280 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml'>
    <!-- <!ENTITY rfc5280 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml'> -->
    <!ENTITY rfc6402 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6402.xml'>
    <!ENTITY rfc7030 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7030.xml'>
    <!-- <!ENTITY rfc7170 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7170.xml'> -->
    <!ENTITY rfc8126 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.8126.xml'>

    <!-- Informative References -->
    <!-- <!ENTITY ietf-acme-acme PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.I-D.ietf-acme-acme.xml'> -->
]>

<rfc category="std" docName="draft-pala-eap-creds-03" ipr="trust200902">
    
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc tocdepth="5"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

  <front>
  <title abbrev="EAP-CREDS">Credentials Provisioning and Management via EAP (EAP-CREDS)</title>
  <author initials="M.P." surname="Pala" fullname="Massimiliano Pala">
    <organization>CableLabs</organization>
    <address>
      <postal>
        <street>858 Coal Creek Cir</street>
        <city>Louisville</city>
        <region>CO</region>
        <code>80027</code>
        <country>US</country>
      </postal>
      <email>m.pala@openca.org</email>
      <uri>http://www.linkedin.com/in/mpala</uri>
    </address>
  </author>
 
  <date month="June" year="2019" />
  <area>Security</area>
  <workgroup></workgroup>
  <keyword>PKI</keyword>
  <keyword>EAP</keyword>
  <keyword>Provisioning</keyword>
  <abstract>
    <t>
        With the increase number of devices, protocols, and applications that rely on strong credentials
        (e.g., digital certificates, keys, or tokens) for network access, the need for
        a standardized credentials provisioning and management framework is paramount.

        The 802.1x architecture allows for entities (e.g., devices, applications, etc.) to authenticate to
        the network by providing a communication channel where different methods can be used to
        exchange different types of credentials.

        However, the need for managing these credentials (i.e., provisioning and renewal) is still a
        hard problem to solve.

	<vspace blankLines="1" />

	EAP-CREDS, if implemented in Managed Networks (e.g., Cable Modems), could
        enable our operators to offer a registration and credentials management service
        integrated in the home WiFi thus enabling visibility about registered devices.
        During initialization, EAP-CREDS also allows for MUD files or URLs to
        be transferred between the EAP Peer and the EAP Server, thus giving
        detailed visibility about devices when they are provisioned with credentials
	for accessing the networks. The possibility provided by EAP-CREDS can help to
	secure home or business networks by leveraging the synergies of the security
	teams from the network operators thanks to the extended knowledge of what
	and how is registered/authenticated.

        <vspace blankLines="1" />

        This specifications define how to support the provisioning and management of authentication
        credentials that can be exploited in different environments (e.g., Wired, WiFi, cellular, etc.)
        to users and/or devices by using EAP together with standard provisioning protocols.
   </t>
  </abstract>
</front>

<middle>

    <section title="Requirements notation">
        <t>
            The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in <xref target="RFC2119"/>.
        </t>
    </section>

    <section anchor="intro" title="Introduction"> 
      <t>
        Many environments are, today, moving towards requiring strong authentication when
        it comes to gain access to networks. The 802.1x architecture provides network
        administrators with the possibility to check credentials presented by a device
        even before providing any connectivity or IP services to it.

        <vspace blankLines="1" />

        However, the provisioning and management of these credentials is a hard problem
        to solve and many vendors opt for long-lived credentials that can not be easily
        revoked, replaced, or simply renewed.

        <vspace blankLines="1" />

        This specification addresses the problem of providing a simple-to-use and
        simple-to-deploy conduit for credentials management by extending the EAP
        protocol to support credentials provisioning and management functionality.

        In particular, the EAP-CREDS method defined here provides a generic framework
        that can carry the messages for provisioning different types of credentials.
        EAP-CREDS cannot be used as a stand-alone method, it is required that EAP-CREDS is used
        as an inner method of EAP-TLS, EAP-TEAP, or any other tunnelling method that can provide
        the required secrecy and (at minimum) server-side authentication to make sure
        that the communication is protected and with the right server.
      </t>

      <section anchor="existing_solutions" title="Overview of existing solutions">
        <t>
          Currently there are many protocols that address credentials lifecycle management. In particular,
          when it comes to digital certificates, some of the most deployed management protocols are: 
          Certificate Management Protocol (CMP) <xref target="RFC4210" />, Certificate Management over CMS (CMC)
          <xref target="RFC5272"/><xref target="RFC6402"/>, Enrollment over Secure Transport (EST)
          <xref target="RFC7030"/>, and Automated Certificate Management Environment (ACME) <!-- <xref target="I-D.ietf-acme-acme"/> -->.

          However, none of these protocols provide native support for client that do not have IP connectivity
          yet (e.g., because they do not have network-access credentials, yet). EAP-CREDS
          provides the possibility to use such protocols (i.e., message-based) by defining a series of
          messages that can be used to encapsulate the provisioning messages for the selected
          provisioning protocol.

          <vspace blankLines="1" />

          In addition to these protocols, EAP-CREDS also defines a series of simple
          messages that provide a generic enrollment protocol that allows not only
          certificates but also other types of credentials (e.g., username/password pairs,
          tokens, or symmetric secrets) to be delivered to the client as part of the provisioning
          and/or renewal process. The set of messages that make up the generic
          provisioning protocol is referred to as the Simple Provisioning Protocol protocol or
          SPP.
        </t>
      </section>

      <section anchor="scope" title="Scope Statement">
        <t>
          This document focuses on the definition of the EAP-CREDS method to convey
          credentials provisioning and managing messages between the client and the
          AAA server. Moreover, the document defines how to encode messages for the
          main IETF provisioning protocols.

          <vspace blankLines="1" />

          This document, however, does not provide specifications for how and where
          the credentials are generated. In particular, the credentials could be
          generated directly within the AAA server or at a different location (i.e., the
          Certificate Service Provider or CSP) site. Different authentication
          mechanisms (e.g., TLS, etc.) can be used to secure the communication
          between the server's endpoint and the CSP.
        </t>
      </section>

      <section anchor="tunnel" title="EAP-CREDS as tunneled mechanism only">
          <t>
            EAP-CREDS requires that an outer mechanism is in place between the Peer and
            the Server in order to provide authentication and confidentiality of the
            messages exchanged via EAP-CREDS. In other words, EAP-CREDS assumes that an
            appropriatly encrypted and authenticated channel has been established to
            prevent the possibility to leak information or to allow man-in-the-middle attacks.
          </t>
          <t>
            This choice was taken to simplify the message flow between Peer and Server, and
            to abstract EAP-CREDS from the secure-channel establishment mechanism. EAP-TLS,
            or EAP-TEAP are examples of such mechanisms.s
          </t>
        </section>

      <section anchor="notation" title="Notation" >
        <t>
            In this document we use the following notation in the diagrams to
            provide information about the cardinality of the data structures (TLVs)
            within EAP-CREDS messages:
        </t>

        <texttable anchor="eap_creds_notation" title="EAP-CREDS Notation">
          <ttcol align="center">Symbol</ttcol>
          <ttcol align="center">Example</ttcol>
          <ttcol align="left">Usage</ttcol>

          <c>{ }</c>
          <c>{TLV1}</c>
          <c>Curly Brackets are used to indicate a set</c>

          <c>[ ]</c>
          <c>{[TLV2]}</c>
          <c>Square Brackets are used to indicate that a field is optional</c>

          <c>( )</c>
          <c>{TLV1(=V)}</c>
          <c>Round Squares are used to specify a value</c>

          <c> + </c>
          <c>{TLV_2+}</c>
          <c>The Plus character indicates that one or more instances are allowed</c>
        </texttable>
      </section>

    </section> <!-- End of Introduction -->

    <section title="EAP-CREDS Protocol">
      <t>
        In a nutshell, EAP-CREDS provides the abstraction layer on top of which credentials
        provisioning/managing protocols can be deployed thus enabling their use even before
        provisioning IP services.
      </t>
        <t>
            This section outlines the operation of the protocol and message flows.
            The format of the CREDS messages is given in <xref target="creds_msg" />.
        </t>

        <section title="Message Flow">
          <t>
              EAP-CREDS message flow is logically subdivided into three different
              phases: Initialization, Provisioning, and Validation. EAP-CREDS
              enforces the order of phases, i.e. it is not possible to move to an
              earlier phase.
            </t>
            <t>
              Phase transitioning is controlled by the Server via the ('Phase-Control')
              TLV: when a messages is the last of one phase or the first of another one,
              the ('Phase-Control') TLV is added to the message with the 'S' bit set
              appropriately, and the value set to the phase number that is transitioning.
            </t>
            <t>
              <list style="hanging">
                <t hangText="Phase One (Required).">
                  Initialization. During this phase the Peer and the Server
                  exchange the information needed to select the appropriate
                  credentials management protocol. In particular, the Sever sends
                  its initial message of type ('EAP-CREDS-Init'). The Peer replies with
                  the details about which provisioning protocols are supported, and additional
                  information such as the list of installed credentials and, optionally,
                  authorization data (for new credentials registration).
                </t>
                <t hangText="Phase Two (Optional).">
                  Provisioning Protocol Flow. In this phase, the Peer and the Server
                  exchange the provisioning protocol's messages encapsulated in a
                  EAP-CREDS message of type ProtoFlow. The messages use two main TLVs.
                  The first one is the ('Provisioning-Headers') TLV which is optional
                  and carries information that might be normally coveyed via the transport
                  protocol (e.g., HTTP headers). The second one is the ('Provisioning-Data'),
                  which is required and carries the provisioning protocol's
                  messages. The server can decide to repeat
                  phase two again to register new credentials or to renew a separate
                  set of credentials. When no more credentials have to be managed,
                  the Server can start phase three or simply terminate the EAP session.
                </t>
                <t hangText="Phase Three (Optional).">
                  Credentials Validation. This optional phase can be initiated by
                  the server and it is used to validate that the Peer has properly
                  installed the credentials and can use them to authenticate
                  itself. Depending on the credentials' type, the messages can
                  carry a challenge/nonce, the value of the secret/token, or other
                  information. The format of the credentials is supposed to be
                  known by the provider and the device.
                </t>
              </list>
          </t>

          <section anchor="phase_transitioning" title="Phase Transition Rules">
            <t>
              In order to keep track of starting and ending a phase, EAP-CREDS defines
              a ('Phase-Control') TLV which is used on the first and last Server's message
              of a phase to idicate the current status of the protocol.
            </t>
            <t>
              Phase transitioning is, therefore, under the sole control of the Server.
              In particular, when starting a new phase, the ('Phase-Control') TLV MUST
              be included by the Server in the message and it shall have the 'S' (Start)
              bit set and the value set to the current phase (e.g., one, two, or three).
              On the other hand, when a phase is to be ended, the last message from the
              Server MUST carry the ('Phase-Control') TLV where the 'S' (Start) bit MUST
              be set to '0' and the value shall be set to the phase number that is ended.
              ('Phase-Control') TLVs can only be used in Server messages (i.e., the Server
              decides when a phase ends and another begins).
            </t>
            <t>
              In case the first message of a phase is to be repeated (e.g., because of
              a recoverable error or becuase processing multiple credentials), the
              ('Phase-Control') TLV SHALL be included only on the first occurrency
              and omitted in subsequent messages.
            </t>
            <t>
              <list>
                <t>
                  NOTE WELL: Once EAP-CREDS transitions from one phase to the next, the
                  state machin MUST prohibit going back to a previous phase. This requirement
                  guarantees that the two parties are always synchronized.
                </t>
              </list>
            </t>
          </section>

        </section>

          <section anchor="creds_phase_one" title="Phase One: Initialization">

            <t>
              The following figure provides the message flow for Phase One:
            </t>
<figure><artwork><![CDATA[

 ,--------.                              ,----------.         
 |EAP Peer|                              |EAP Server|         
 `---+----'                              `----+-----'         
     |        Outer Tunnel Established        |               
     | <-------------------------------------->               
     |                                        |               
     | [1] EAP-Request/EAP-CREDS(Type=Init)   |  ,---------!. 
     |     { PhaseCtrl(=START), [ Version+ ] }|  |Phase One|_\
     | <---------------------------------------  |Begins     |
     |                                        |  `-----------'
     |  [2] EAP-Response/EAP-CREDS(Type=Init) |               
     |      { Protocol+, Encodings,           |               
     |        Formats, [  Version  ]          |               
     |        [ CredInfo+ ], [ StorageInfo ]  |               
     |        [ Token ], [ Challenge ],       |               
     |        [ Challenge-Rsp ], [ Profile+], |               
     |        PhaseCtrl(=END) }               |               
     | --------------------------------------->               
     |                                        |               
     |  [3] EAP-Request/EAP-CREDS(Type=Init)  |  ,---------!. 
     |      { PhaseCtrl(=END), Version }      |  |Phase One|_\
     | <---------------------------------------  |Ends       |
     |                                        |  `-----------'
     |                                        |               


]]></artwork></figure>
            <t>[1] Server sends EAP-Request/EAP-CREDS(Type=Init):
              <list>
                <t>
                  After the establishment of the outer
                  mechanism (e.g., EAP-TLS, EAP-TEAP, EAP-TTLS, etc.), the server MAY
                  decide to start a credentials management session. In order to do that,
                  the Server sends an EAP-Request/EAP-CREDS(Type=Init) message to the Peer with
                  one ('Phase-Control') TLV with the 'S' bit set to '1' and the value set
                  to '1' (thus indicating the beginning of Phase One). Also, the Server
                  MAY use one or more ('Version') TLVs to indicate the supported versions.
                </t>
                <t>
                  The Server MAY also specify which versions of EAP-CREDS are supported
                  by adding one or more ('Version') TLVs. If no ('Version') TLV is added
                  to the message, the Peer SHOULD assume the supported version is 1 ('0x1').
                </t>
              </list>
            </t>
            <t>[2] The Peer sends EAP-Response/EAP-CREDS(Type=Init)
              <list>
                <t>
                  The Peer, sends back a message that carries one
                  ('Version') TLV to indicate the selected version of EAP-CREDS (i.e.
                  from the list provided by the server) (optional). If the client does
                  not include the ('Version') TLV, the Server MUST use the most recent
                  supported version of EAP-CREDS. Moreover, the Server includes one or
                  more ('Protocol') TLVs to indicate the list of supported provisioning
                  protocols, followed by one ('Credentials-Info') TLVs for each installed
                  credentials to provide their status to the server (i.e., if multiple
                  credentials are configured on the Peer for this Network, then the Peer
                  MUST include one ('Credentials-Info') TLV for each of them).
                </t>
                <t>
                  The Peer also provides the list of supported Encodings and Formats
                  by adding one or more ('Supported-Encodings') and ('Supported-Formats')
                  TLVs. The Peer MAY also provide the Server with information about the
                  Peer's credentials storage by using the 'Storage-Status' TLV.
                </t>
                <t>
                  When there are no abailable credentials, the Peer MAY include an authorization
                  token that can be consumed by the Server for registering new credentials.
                  In particular, the Peer can include the ('Token-Data') TLV to convey the
                  value of the token. The ('Challenge-Data') and ('Challenge-Response') TLVs,
                  instead, can be used to convey a challenge and its response
                  based on the authorization information (e.g., maybe a public key hash is
                  present in the Token, then the peer can generate some random data - or use the
                  one from the Server - and generate a signature on that value: the
                  signature SHALL be encoded in the ('Challenge-Response') TLV and it should
                  be calculated over the concatenation of values inside the ('Challenge-Data')
                  TLV and the ('Token-Data') TLV.
                </t>
                <t>
                  Also, the Peer MAY add one or more ('Profile') TLVs to indicate to the Server
                  which profiles are requested/supported (e.g., a pre-configuration MAY exist
                  on the Peer with these ecosystem-specific identifiers).
                </t>
                <t>
                  Ultimately, the Peer MAY include one ('Storage-Info') TLV to provide the server
                  with additional data about the Peer's capabilities and resources.
                </t>
                <t>
                  The server checks that the Peer's selected protocol, version, and
                  parameters are supported and, if not (or if the server detects an
                  error), it can (a) send a non-recoverable error message to the peer,
                  notify the outer (tunneling) layer, and terminate the EAP-CREDS session, or
                  (b) start phase one again by sending a new ('EAP-CREDS-Init') message
                  that will also carry an ERROR TLV that provides the Peer with the
                  reason the initial response was not acceptable. In this case, the
                  ('Phase-Control') TLV MUST be omitted since it is not the first message of 
                  phase one. The server and the peer can repeat phase one until they reach
                  an agreement or the session is terminated by the Server.
                </t>
              </list>
            </t>
            <t>
              <list>
                <t>
                  NOTE WELL: The determination of the need to start phase two or not is based on the
                  contents of the ('Credentials-Info') TLV sent by the Peer (e.g., a credential
                  is about to expire or a credential is simply missing).
                </t>
              </list>
            </t>
            <t>[3] The Server sends EAP-Request/EAP-CREDS(Type=Init)
              <list>
                <t>
                  In order to terminate Phase One, the Server sends a last message that
                  carries the ('Phase-Control') TLV with the 'S' bit set to '0' (end of
                  phase) and the value shall be set to '1' (phase one). On top of that,
                  the Server also sends one ('Version') TLV (mandatory) to announce the
                  selected EAP-CREDS version to speak.
                </t>
                <t>
                  When registering new credentials (e.g., no 'Credentials-Info' TLV was
                  sent by the Peer and the Peer is authorized to present new credentials),
                  the Server MAY add a ('Profile') TLV to indicate the selected
                  profile for the new credentials that will be provisioned in Phase Two.
                </t>
              </list>
            </t>

            <section anchor="phase_one_state_machine" title="Phase One State Machine">
              <t>
                The Server's state machine is depicted in the following Figure:
              </t>
              <figure><artwork><![CDATA[

+-------------------+
|  Start Phase One  |
+-------------------+
          |
          v
+-------------------+
| Send the Init Msg |<------------------+
+-------------------+                   |
          |                             |
          v                             |
+-------------------+                   |
| Receives Peer's   |                   |
|    Init Msg       |                   |
+-------------------+                   |
          |                             | Yes
          v                             ^
 +------------------+  Yes   +---------------------+
 | Checks for Error |>------>|    Recoverable ?    |
 +------------------+        +---------------------+
          |  No                         |
          v                             v
+-------------------+        +---------------------+
|    End Phse One   |        |    Send Error Msg   |
+-------------------+        +---------------------+
                                        |
                                        v
                             +---------------------+
                             |   End EAP Session   |
                             +---------------------+

                ]]></artwork></figure>
              <t>
                The first message from the server starts the phase
                by using the ('Phase-Control') TLV.
              </t>
              <t> 
                  The Server selects
                  the action, the provisioning protocol, and associated parameters.
                  Phase Two officially begins with the next message exchanged (i.e. an
                  EAP-Request/EAP-CREDS(Type=ProtoFlow)),which MUST include the
                  ('Phase-Control') TLV with the 'S' bit set to '1' and the value set
                  to '2'. The message MUST also includes, at minimum,
                  the selected ('Action') and ('Protocol') TLVs.
                </t>
                <t>
                  When renewing existing credentials or registering new ones, the Server
                  MUST include the ('Provisioning-Params') TLVs.
                </t>
                <t>
                  When removing or renewing existing credentials, the Server MUST include
                  the ('Credentials-Info') TLV to identify the set of credentials to which the
                  action applies.
                </t>
                <t>
                  If multiple values are detected in the message, the message shall be
                  discarded and the appropriate error message shall be issued by the Peer.
              </t>
            </section>
          </section>


          <section anchor="creds_phase_two" title="Phase Two: Provisioning">
            <t>
              The following figure provides the message flow for Phase 2:
            </t>

<figure><artwork><![CDATA[

 ,--------.                                 ,----------.         
 |EAP Peer|                                 |EAP Server|         
 `---+----'                                 `----+-----'         
     | [1] EAP-Request/EAP-CREDS(Type=ProtoFlow) |               
     |     { PhaseCtrl(=START), Protocol, Action,|  ,---------!. 
     |       [ CredInfo  ], [ Params ],          |  |Phase Two|_\
     |       [ ProtoData ], [ Profile ] }        |  |Begins     |
     | <------------------------------------------  `-----------'
     |                                           |               
     | [2] EAP-Response/EAP-CREDS(Type=ProtoFlow)|               
     |     { ProtoData, [ ProtoHeaders ] }       |               
     | ------------------------------------------>               
     |                                           |               
     | [3] EAP-Response/EAP-CREDS(Type=ProtoFlow)|               
     |     { ProtoData, [ ProtoHeaders ] }       |               
     | <------------------------------------------               
     |                                           |               
     .                                           .               
     .                                           .               
     .                                           .               
     .                                           .               
     | [N] EAP-Request/EAP-CREDS(Type=ProtoFlow) |  ,---------!. 
     |     { PhaseCtrl(=END) }                   |  |Phase Two|_\
     | <------------------------------------------  |Ends       |
     |                                           |  `-----------'
     |                                           |               

]]></artwork></figure>
            <t>[1] The Server sends EAP-Request/EAP-CREDS(Type=Init)
              <list>
                <t>
                  The first message of Phase Two indicates that the Server is
                  ready to initiate the selected provisioning protocol.
                </t>
              </list>
            </t>
            <t>[2] The Peer sends EAP-Response/EAP-CREDS(Type=Init)
              <list>
                <t>
                  After that, the Peer sends its first message to the Server by sending the
                  EAP-Response/EAP-CREDS(Type=ProtoFlow) message. This message contains
                  the selected provisioning protocol's message data and some extra fields
                  (e.g., transport-protocol headers) in the ('Provisioning-Data') and 
                  ('Protocol-Headers') TLVs respectively.
                </t>
              </list>
            </t>
            <t> [3] The Server sends EAP-Request/EAP-CREDS(Type=Init)
              <list>
                <t>
                  The Server replies to the Peer's message with EAP-Request/EAP-CREDS(Type=ProtoFlow)
                  messages until the provisioning protocol reaches an end or an error condition
                  arise (non-recoverable).
                </t>
              </list>
            </t>
            <t>[N] The Server sends EAP-Request/EAP-CREDS(Type=ProtoFlow)
              <list>
                <t>
                  The Server terminates Phase Two by
                  sending a final message carrying the ('Phase-Control') TLV with the 'S' bit
                  set to '0' and the value set to '2' (thus indicating the end of Phase Two).
                  The final message does not need to be an empty one, i.e. other TLVs are still
                  allowed in the same message (e.g., the 'Provisioning-Data' and the
                  'Provisioning-Headers' ones).
                </t>
              </list>
            </t>

            <section anchor="phase_two_state_machine" title="Phase Two State Machine">
            <t>
              The Server's state machine for Phase Two is depicted in the following Figure:
            </t>
<figure><artwork><![CDATA[
                 +-------------------+
                 |  Start Phase Two  |
                 +-------------------+
                            |
                            v
             Yes +-------------------+ No
          +-----<|  New Credentials  |>-----+
          |      |    Available ?    |      |
          |      +-------------------+      |
          |                ^                |
          v                |                v
+-------------------+      |      +-------------------+
| Action Needed for |>-----+      |   Register New    |
|   Credentials ?   | No          |    Credentials    |
+-------------------+             +-------------------+
          v Yes                      Yes v       v No
          |                              |       |
          |      +-------------------+   |       |
          +----->|   Provisioning    |<--+       |
                 |     Protocol      |           |
                 +-------------------+           |
                           |  No                 |
                           v                     |
                 +------------------+            |
                 | End of Provision |            |
                 +------------------+            |
                           |                     |
                           v                     |
                 +------------------+            |
                 | End of Phase Two |<-----------+
                 +------------------+
]]></artwork></figure>

                <t>
                  The Server can decide to repeat
                  phase two as many times as needed: each time, the combination of the
                  ('Credentials-Info') TLV (a.k.a. CredInfo) and the ('Action') TLV
                  MUST be unique for each session to make sure notto repeat the same
                  operation on the same credential over and over again.
                  In case all credentials for the Network do not need maintenance at this
                  time, the Server can decide to end the EAP-CREDS session (no actions
                  to be taken) and successfully complete the EAP session.
                </t>
            </section>

          </section>

          <section anchor="creds_phase_three" title="Phase Three: Validation">
            <t>
              The following figure provides the message flow for Phase 3:
            </t>

<figure><artwork><![CDATA[

 ,--------.                                ,----------.           
 |EAP Peer|                                |EAP Server|           
 `---+----'                                `----+-----'           
     | [1] EAP-Request/EAP-CREDS(Type=Validate) |  ,-----------!. 
     |     { PhaseCtrl(=START), CredInfo,       |  |Phase Three|_\
     |      Challenge }                         |  |Begins       |
     | <-----------------------------------------  `-------------'
     |                                          |                 
     | [2] EAP-Response/EAP-CREDS(Type=Validate)|                 
     |     { Challenge, ChallengeResponse,      |                 
     |       [ ExtraChallenge ] }               |                 
     | ----------------------------------------->                 
     |                                          |                 
     | [3] EAP-Request/EAP-CREDS(Type=Validate) |  ,-----------!. 
     |     { Challenge, ChallengeResponse       |  |Phase Three|_\
     |       PhaseCtrl(=END) }                  |  |Ends         |
     | <-----------------------------------------  `-------------'
     |                                          |                 
     |                                          |                 

]]></artwork></figure>
            <t>
              Phase three is optional and it is used by the server to request the client to
              validate (proof) that the new credentials have been installed correctly
              before issuing the final Success message.
            </t>
            <t>
                <list>
                    <t>
                        NOTE WELL:
                        Phase Three introduces a dependency on the selected hashing algorithm
                        to provide common and easy way to check the integrity and functionality
                        of a newly installed set of credentials.
                    </t>
                </list>
            </t>
            <t>[1] The Server sends EAP-Request/EAP-CREDS(Type=Validate)
              <list>
                <t>
                  In order to start Phase Three, the Server sends an
                  EAP-Request/EAP-CREDS(Type=Validate) message to the Peer.
                  The Server MUST include the ('Credentials-Info') TLV to provide the indication about
                  which set of credentials the Server intends to validate. The Server MUST also include a
                  randomly generated challenge in the message to the client.
                </t>
                <t>
                  As usual, the Server MUST also include the ('Phase-Control') TLV in its first
                  message of Phase Three. In this case, the 'S' bit shall be set to '1' and the
                  value shall be set to '3' (beginning of Phase Three).
                </t>
              </list>
            </t>
            <t>[2] The Peer sends EAP-Response/EAP-CREDS(Type=Validate)
              <list>
                <t>
                  When the client receives the Validate message from the server, it calculates the
                  response to the challenge and sends the response back to the server in a
                  EAP-Response/EAP-CREDS(Type=Validate) message. The Peer MUST
                  calculate the response as follows:
                  <list>
                    <t>
                        Public-Key
                        <list>
                        <t> For any public-key based credentials (e.g., certificates or
                        raw key pairs), the response to the challenge is calculated by generating a
                        signature over the hashed value of the challenge. The hashing algorithm
                        to be used for this purpose is specified in <xref target="eap_creds_hashing" />.
                        The format of the signature in the ('Challenge-Response') TLV is the
                        concatenation of:
                        <list style="symbols">
                          <t>
                            The signatureAlgorithm (DER encoded) which contains the identifier for the
                            cryptographic algorithm used by the Peer to generate the signature.
                            [RFC3279], [RFC4055], and [RFC4491] list supported signature
                            algorithms, but other signature algorithms MAY also be supported.
                            The definition of the signatureAlgorithm is provided in Section 4.1.1.2
                            of <xref target="RFC5280" />.
                          </t>
                          <t>
                            The signatureValue (DER encoded) which contains the digital signature
                            itself. The signature value is encoded as a BIT STRING and the details
                            of how to generate the signatures' structures can be found in
                            Section 4.1.1.3 of <xref target="RFC5280" /> and referenced material.
                          </t>
                        </list>
                        </t>
                        </list>
                    </t>
                    <t>
                        Symmetric Secret
                        <list>
                        <t>For any symmetric based credentials (e.g., password or
                        Key), the response to the challenge is calculated by using the selected
                        hash function (see <xref target="eap_creds_hashing" />) on the concatenation of
                        (a) the value carried in the server-provided ('Challenge-Data') TLV, and
                        (b) the secret value itself (salted hash).
                        </t>
                        </list>
                    </t>
                  </list>
                </t>
                <t>
                  Optionally, the client can add a separate ('Challenge-Data') TLV in its
                  reply to request that the network proves it can calculate responses. This extra
                  challenge is only available for symmetric secrets (it is not used to verify
                  again the identity of the server, but it is used for the server to prove it
                  does have the right symmetric data on its side too). This 'extra' challenge carries the
                  Peer-generated challenge information that the Server MUST use to calculate
                  the corresponding ('Challenge-Response') TLV.
                </t>
                <t>
                  <list>
                    <t>
                      NOTE WELL: The Server might not be able to respond to the extra challenge
                      from the client because it might not posses the secret key (e.g., in case
                      of public-key cryptography, the private key might not be shared with the Server,
                      therefore it cannot generate signatures that the client can verify). In
                      that case, the Server will NOT add the
                      ('Challenge-Response') TLV to its reply, but it MUST add the appropriate
                      ('Errror') TLV.
                    </t>
                  </list>
                </t>
              </list>
            </t>
            <t>[3] The Server sends EAP-Request/EAP-CREDS(Type=Validate)
              <list>
                <t>
                  When the server receives the EAP-Response/EAP-CREDS(Type=Validate) with the Challenge
                  TLV in it, it MUST calculate the response to the challenge and send back the
                  response to the client in an EAP-Request/EAP-CREDS(Type=Validate) with the
                  ('Challenge-Response') TLV.
                </t>
                <t>
                  In case of issues with the validation of the newly deployed credentials, both
                  the Server and the Peer should consider those credentials invalid (or
                  unusable) and should issue the required failure message(s).
                </t>
              </list>
            </t>

            <section anchor="phase_three_state_machine" title="Phase Three State Machine">
            <t>
              The Server's state machine for Phase Three is depicted in the following Figure:
            </t>
<figure><artwork><![CDATA[
                                 +-------------------+
                                 | Start Phase Three |
                                 +-------------------+
                                            |
                                            v
                                 +---------------------+ No
+------------------------------->|   New Credentials   |>-------+
|           +------------------->|     Available ?     |<---+   |
|           |                    +---------------------+    |   |
|           |                  Yes |       ^                |   |
|           |                      v       |                |   |
|           |   +-------------------+      |                |   |
|           |   |     Validate      |>-----+                |   |
|           |   |   Credentials ?   | No                    |   |
|           |   +-------------------+                       |   |
|           |             v Yes                             |   |
|           |             |                                 |   |
|           |             |      +---------------------+    |   |
|           |             +----->|     Send Validate   |    |   |
|           |                    |       Messsage      |    |   |
|           |                    +---------------------+    |   |
|           |                              |                |   |
|           |                              v                |   |
|   +---------------------+   No +---------------------+    |   |
|   |  Report the Error   |<----<|   Response Error?   |----+   |
|   +---------------------+      +---------------------+ No     |
|                                      Yes |                    |
|                                          v                    |
|                            No +---------------------+         |
+------------------------------<|   End Validation ?  |         |
                                +---------------------+         |
                                       Yes |                    |
                                           v                    |
                                +---------------------+         |
                                |   End Phase Three   |<--------+
                                +---------------------+
]]></artwork></figure>
          </section>
        </section>
    </section>

    <section anchor="creds_msg" title="EAP-CREDS Message Format">
        <t>
            The EAP-CREDS defines the following message types:
            <list style="numbers">
                <t>EAP-CREDS/Init</t>
                <t>EAP-CREDS/ProtoFlow</t>
                <t>EAP-CREDS/Validate</t>
            </list>
        </t>
        <t>
            Each of these message types have the basic structure as identified in <xref target="creds_header" />
            and in <xref target="creds_msg_payload" />. EAP-CREDS messages contain zero, one, or more TLVs.
            The internal structure of the different types of TLVs is described in <xref target="creds_msg_tlv_def" />,
            while a detailed description of the EAP-CREDS message types is provided in <xref target="creds_msg_types" />.
        </t>

      <section anchor="creds_header" title="Message Header">
        <t>
            The EAP-CREDS messages consist of the standard EAP header (see Section 4
            of <xref target="RFC3748" />), followed by the version of the EAP-CREDS
            (4 bits) and a field (4 bits) reserved for future use.
            The header has the following structure:
        </t>
        <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Code      |  Identifier   |             Length            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Type      | Flags |  Ver  |         Message Length        |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |         Message Length        |               Data           ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-.

]]></artwork></figure>

        <t>
          Where the Code, Identifier, Length, and Type fields are all part of the EAP
          header as defined in <xref target="RFC3748" />.
        </t>
        <t>
          The Type field in the EAP header is &lt;TBD&gt; for EAP-CREDS.
        </t>
        <t>
          The Ver (Version) bitfield (4 bits) identifies the version of the
          EAP-CREDS protocol used for the exchange.
          This document defines the value to use for this field as '0x1' (0001).
        </t>
        <t>
          The Flags bitfield (4 bits) is currently not used and it is reserved
          for future use. The value of the bitfield shall be ignored when the
          Version ('Ver') field is set to '0x1' (0001).
        </t>
      </section>

      <section anchor="creds_msg_payload" title="Message Payload">
        <t>
          The Data part of the message is organized as zero, one, or more TLV
          objects whose structure is defined in this section. In particular,
          the general structure of a TLV is described in <xref target="creds_msg_tlv_def" />,
          while the specific structures for the supported TLVs is provided
          in <xref target="creds_tlvs_types" />.
        </t>

      <section anchor="creds_msg_tlv_def" title="General TLV format">
        <t>
          Each TLV object has the same basic structure that is defined as follows:
        </t>
<figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                   TLV Length                  |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                       TLV Value                              ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
          <t>Where:</t>
          <t>TLV-Type (uint8)
            <list>
              <t>
                This field is used to indicate the type of data that the TLV
                carries. The type of TLV determines its internal structure.
                The supported values for this fields are provided in the following
                table:
              </t>
            </list>
          </t>
          <t>Length (uint24)
            <list>
              <t>
                This field carries the size of the value of the TLV. In particular,
                the overall size of a TLV (i.e., the header plus the value) can be
                calculated by adding the size of the header (6 octects) to the value
                of the Length field (i.e., the size of the TLV's value).
              </t>
            </list>
          </t>

          <texttable anchor="eap_creds_tlvs_table" title="EAP-CREDS Supported TLVs Types">
            <ttcol align="center">TLV Name</ttcol>
            <ttcol align="left">TLV Type</ttcol>
            <ttcol align="center">Scope/Usage</ttcol>

              <c>&lt;TBD&gt;</c>
              <c>Action TLV</c>
              <c>Phase Two</c>

              <c>&lt;TBD&gt;</c>              
              <c>Certificate-Data TLV</c>
              <c>Phase Two/SPP</c>

              <c>&lt;TBD&gt;</c>
              <c>Challenge-Data TLV</c>
              <c>Phase Two, Phase Three</c>

              <c>&lt;TBD&gt;</c>
              <c>Challenge-Response TLV</c>
              <c>Phase Two, Phase Three</c>

              <c>&lt;TBD&gt;</c>
              <c>Credentials-Data TLV</c>
              <c>Phase Two/SPP</c>

              <c>&lt;TBD&gt;</c>
              <c>Credentials-Info TLV</c>
              <c>Phase Two, Phase Three</c>

              <c>&lt;TBD&gt;</c>
              <c>Error TLV</c>
              <c>All Phases</c>

              <c>&lt;TBD&gt;</c>
              <c>Peer-Description TLV</c>
              <c>All Phases</c>

              <c>&lt;TBD&gt;</c>
              <c>Phase-Control TLV</c>
              <c>All Phases</c>

              <c>&lt;TBD&gt;</c>
              <c>Profile TLV</c>
              <c>Phase Two</c>
              
              <c>&lt;TBD&gt;</c>
              <c>Protocol TLV</c>
              <c>Phase One, Phase Two</c>

              <c>&lt;TBD&gt;</c>
              <c>Provisioning-Data TLV</c>
              <c>Phase Two</c>

              <c>&lt;TBD&gt;</c>
              <c>Provisioning-Headers TLV</c>
              <c>Phase Two</c>

              <c>&lt;TBD&gt;</c>
              <c>Provisioning-Params TLV</c>
              <c>Phase Two</c>

              <c>&lt;TBD&gt;</c>
              <c>Token-Data TLV</c>
              <c>Phase One</c>

              <c>&lt;TBD&gt;</c>
              <c>Version TLV</c>
              <c>Phase One</c>

          </texttable>

          <t>TLV Value ( > 1 octet )
            <list>
                <t>
                    This field carries data for the identified TLV. The internal structure
                    is determined by the TLV Type field.
                </t>
            </list>
          </t>

      </section>

      <section anchor="creds_tlvs_types" title="EAP-CREDS defined TLVs">
      <t>
        EAP-CREDS messages's payload comprieses zero, one, or more TLVs that are encoded
        in a single EAP-CREDS message.
        The values for the TLV Type that are supported by this specifications are listed
        in <xref target="eap_creds_tlvs_table" />.
      </t>

      <t>
        This section describes the structure of the different
        supported TLVs and their usage in the different messages.
      </t>

    <section anchor="tlv_action" title="The Action TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |     Flags     |          Action Type          |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Action TLV</t>
        </list>
    </t>
    <t>Flags (uint8)
        <list>
            <t>Reserved</t>
        </list>
    </t>
    <t>Action Type (uint16)
        <list>
            <t>
                Provides the indication of the type of action to be performed
                in the current run of the phase two of EAP-CREDS. The values for
                this field are provided in <xref target="iana_action_table" />.
            </t>
        </list>
    </t>
    <t>Encoding (uint8)
        <list>
            <t>
                Provides the indication of the Encoding the credentials are in. The
                allowed values for this field are listed in 
                <xref target="iana_creds_encoding_table" />.
            </t>
        </list>
    </t>
    <t>Value (octet string)
        <list>
            <t>
                This field carries the data for the credentials.
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_certificatedata" title="The Certificate-Data TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Flags     |    Format     |    Encoding     |    Value   ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Certificate-Data TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>Provides the length of the TLV (> 3 octets)</t>
        </list>
    </t>
    <t>Flags (uint8)
        <list>
            <t>
                Provides a BITMASK that can be used to provide additional information
                related to the encapsulated certificate. The bits have the following
                meaning:
                <list>
                    <t>Bit 0 - If set, the certificate is trusted (Trust Anchor)</t>
                    <t>Bit 1 - If set, the certificate is a CA certificate</t>
                    <t>Bit 2 - If set, the certificate is self-signed</t>
                    <t>Bit 3 - If set, the certificate is a proxy certificate</t>
                    <t>Bit 4 - If set, the certificate is an attributes certificate</t>
                    <t>Bit 5 - Reserved</t>
                    <t>Bit 6 - Reserved</t>
                    <t>Bit 7 - Reserved</t>
                </list>
            </t>
        </list>
        For a Trusted Root CA, the value of the flags shall be 0x7 (0000 0111).
        For an intermediate CA certificate that is not implicitly trusted, the value of
        the flags field should be set to 0x02 (0000 0010).
        For an End-Entity certificate, the value of the Flags will be 0x0 (0000 0000).
    </t>
    <t>Format (uint8)
        <list>
            <t>
                Provides the indication of the Format the certificate is in. The
                allowed values for this field are listed in
                <xref target="iana_creds_data_type" />.
            </t>
        </list>
    </t>
    <t>Encoding (uint8)
        <list>
            <t>
                Provides the indication of the Encoding the certificate is in. The
                allowed values for this field are listed in 
                <xref target="iana_creds_encoding_table" />.
            </t>
        </list>
    </t>
    <t>Value (octet string)
        <list>
            <t>
                This field carries the data for the certificate.
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_challenge" title="The Challenge-Data TLV">
      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                           Challenge Data                     ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
      <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Challenge-Data TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>3 octets</t>
        </list>
    </t>
    <t>Challenge Data (> 1 octet)
        <list>
            <t>
                This field carries the data to be used as a challenge
                when validating newly deployed credentials
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_challenge_response" title="The Challenge-Response TLV">
        <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                       Challenge Response                     ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
      <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Challenge-Response TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>3 octets</t>
        </list>
    </t>
    <t>Challenge Response (> 1 octet)
        <list>
            <t>
                This field carries the data that resulted from the use
                of the credentials to be validated.
            </t>
        </list>
    </t>
    </section>

<section anchor="tlv_credinfo" title="The Credentials-Information TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |        
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Flags     |   CredsType   |             ProtoID           |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                                                               |
 |                         IssuedOn (GMT)                        |
 |                                                               |
 |                                                               |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                                                               |
 |                        Expires On (GMT)                       |
 |                                                               |
 |                                                               |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                       Credentials Length                      |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                           CredIDValue                        ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>
        The Credential-Information TLV is used by the Peer to provide
        a description of the installed credentials that are relevant for
        the network that is being accessed. The TLV is also used by the
        server to provide indication to the Peer about the required
        parameters when requesting/updating credentials.
    </t>
    <t>
        For example, when a set of credentials need to be renewed, the
        server checks the CredInfo from the Peer and eventually selects
        the right one for renewal - in the first message of Phase Two,
        the CredInfo TLV is used by the server to convey (let's say
        that the credentials to renew are X.509 based) the requirements
        for generating the X.509 PKCS#10 request, such as the algorithm
        (RSA, ECDSA, etc.) further parameters (e.g., the specific curve
        to use or the Key Size) and the indication if the credentials are
        to be generated on the server or on the client.
    </t>
    <t>
        The TLV structure is as follows:
    </t>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Credentials-Information TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>
                Provides the total length of the body of the Credential-Information TLV.
            </t>
        </list>
    </t>
    <t>Flags (uint8)
        <list>
            <t>
                Provides a BITMASK that can be used to provide information
                about the status of the credentials (e.g., if the use marks the
                credentials to be compromised). The bits have the following
                meaning:
                <list>
                    <t>Bit 0 - If set, the credential is marked as compromised</t>
                    <t>Bit 1 - If set, the credential is immutable and cannot be updated</t>
                    <t>Bit 2 - Private Key or Secret Immutable, the public part of the
                               credential (e.g., a certificate) can still be updated</t>
                    <t>Bit 3 - If set, the credential cannot be updated (both public and
                               private parts)</t>
                    <t>Bit 4 - If set, the credential is ready to be used </t>
                    <t>Bit 5 - If set, the credential was generated on the server</t>
                    <t>Bit 6 - If set, the Peer would like to update the credential even
                               if they are not expired</t>
                    <t>Bit 7 - Reserved</t>
                </list>
            </t>
        </list>
    </t>
    <t>CredType (uint8)
        <list>
            <t>
                This field provides the description of the type of credential. The type
                of credentials are listed in <xref target="iana_creds_type_table" />
            </t>
        </list>
    </t>
    <t>ProtoID (uint16)
        <list>
            <t>
                This field indicates the protocol that was used to retrieve the target
                credential. When the TLV is used in a Request by the Server, this field
                specifies which protocol should be used for its management. The values
                for this field are listed in <xref target="iana_proto_table" />.
            </t>
        </list>
    </t>
    <t>IssuedOn (16 octets)
        <list>
            <t>
                This field carries the GMT date for when this credential was issued.
                This field is 16 bytes long (the last byte must be set to '0x00') and
                contains the NULL-terminated ASCII string that represents the timestamp
                where the credential was issued. When the value is not set, the field
                should be set to { 0x00 }. The format of the string is as follows:
            </t>
            <t>
                <list>
                    <t>YYYYMMDDHHmmssZ</t>
                </list>
            </t>
            <t>
                Where:
                <list>
                    <t>YYYY - is the 4 digits representation of the year</t>
                    <t>MM - is the 2 digits representation of the month</t>
                    <t>DD - is the 2 digits representation of the day of the month</t>
                    <t>HH - is the 2 digits representation of the hour of the day (24 hour format)</t>
                    <t>mm - is the 2 digits representation of the minutes of the hour</t>
                    <t>ss - is the 2 digits representation of the seconds of the minute</t>
                    <t>Z - is the character 'Z'</t>
                </list>
            </t>

        </list>
    </t>
    <t>ExpiresOn (16 octets)
        <list>
            <t>
                This field carries the GMT date for when this credential is to be considered
                expired. This field is 16 bytes long (the last byte must be set to '0x00') and
                contains the NULL-terminated ASCII string that represents the timestamp where
                the credential was issued. The format is the same as the ('IssuedOn') field.
                When the value is not set, the field should be set to { 0x00 }.
            </t>
        </list>
    </t>
    <t>Credentials Length (uint16)
        <list>
            <t>
                Length (in bytes) of the Credentials value. When used with a public-key
                type of credentials, this is the size of the key (e.g., for an RSA 2048
                bit keys, this field should carry the value of 256). When used with a
                symmetric secret, this field carries the size of the secred (in bytes).
            </t>
        </list>
    </t>
    <t>CredIDValue (> 1 octet)
        <list>
            <t>
                The binary value of the credentials' identifier. This identifier can be the
                binary value of the SHA-256 calculated over the certificate, a username, or
                it could be a simple random handle. As long as the ID allows the server to
                uniquely (in its context) identify the credentials, the value of this field
                can be calculated in any way.
            </t>
        </list>
    </t>

    <!--
    <t>ProviderIDLen (uint8)
        <list>
            <t>
                Length (in bytes) of the Provider's ID Value field.
            </t>
        </list>
    </t>
    <t>ProviderIDValue (> 1 octet)
        <list>
            <t>
                The binary value of the provider's identifier. This identifier can be the
                binary value of the SHA-256 calculated over the CA certificate, the text
                representation of a policy OID, or it could be a simple random handle. As
                long as the ID allows the Server to uniquely (in its context) identify the
                provider, the value of this field can be calculated in any way. This field
                is optional and, when not used, it should be omitted and its size should
                be set to zero ('ProviderIDLen').
            </t>
        </list>
    </t>
    <t>ProfileIDLen (uint8)
        <list>
            <t>
                Length (in bytes) of the Profile's ID Value field.
            </t>
        </list>
    </t>
    <t>ProfileIDValue (> 1 octet)
        <list>
            <t>
                The binary value of the profile's identifier. This identifier can be the
                binary value of a policy OID, a sequence number, or a printable text
                string. As long as the ID allows the Server to uniquely (in its context)
                identify the profile, the value of this field can be populated according
                to the provider's practices. This field is optional and, when not used,
                it should be omitted and its size should be set to zero ('ProfileIDLen').
            </t>
        </list>
    </t>
    -->

    </section>

<section anchor="tlv_credparams" title="The Credentials-Data TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Cred Type   |     Format    |    Encoding     |     Value  ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Credentials-Data TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>Provides the length of the TLV (> 3 octets)</t>
        </list>
    </t>
    <t>Cred Type (uint8)
        <list>
            <t>
                Provides the indication of the type of credentials. The allowed
                values for this field are listed in <xref target="iana_creds_type_table" />.
            </t>
        </list>
    </t>
    <t>Format (uint8)
        <list>
            <t>
                Provides the indication of the Format the credentials are in. The
                allowed values for this field are listed in
                <xref target="iana_creds_data_type" />.
            </t>
        </list>
    </t>
    <t>Encoding (uint8)
        <list>
            <t>
                Provides the indication of the Encoding the credentials are in. The
                allowed values for this field are listed in 
                <xref target="iana_creds_encoding_table" />.
            </t>
        </list>
    </t>
    <t>Value (octet string)
        <list>
            <t>
                This field carries the data for the credentials.
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_errors" title="The Error TLV">
        <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     EAP-CREDS Error Code      |      Secondary Error Code     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                          Description                         ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
      <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Challenge-Response-Data TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>3 octets</t>
        </list>
    </t>
    <t>EAP-CREDS Error Code (2 octets)
        <list>
            <t>
                This field carries the EAP-CREDS error code. These code are related
                to the EAP-CREDS operations only and it should not be used to carry
                the Provisioning-Protocol specific error codes.
            </t>
        </list>
    </t>
    <t>Secondary Error Code (2 octets)
        <list>
            <t>
                This field is used to convery an error at the encapsulation layer
                (i.e., the provisioning protocol error). Do not use this field to
                convery EAP-CREDS specific errors.
            </t>
        </list>
    </t>
    <t>Description ( > 1 octet)
        <list>
            <t>
                The Description field is optional (i.e., when the Description Size
                is set to zero) and carries information about the error that occurred.
                The message may or may not be used by a user or an automated process
                for debugging purposes.
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_networkusage" title="The Peer-Description TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Type      |              Peer Description Data           ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - The Peer-Description TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>More than 1 octet</t>
        </list>
    </t>
    <t>Type (uint8)
      <list>
        <t>
          The Type of data in the Peer Description Data. The initial values
          for this field are listed in <xref target="iana_usage_metadata_type" />.
        </t>
      </list>
    </t>
    <t>Peer Description Data (octet string)
        <list>
            <t>
                This is additional information related to the device. In particular,
                this TLV can be used by the Peer to provide the Server with the description
                of the intended network usage.
            </t>
            <t>
                For example, this field can be used to convey a MUD file (Manufacturer
                Usage Description) or the latest firmware-update manifest.
            </t>
        </list>
    </t>
    </section>

<!--
    <section anchor="tlv_provider" title="The Provisioning-Provider TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                   Provider Identifying Data                  ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Provisioning-Providers TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>3 octets</t>
        </list>
    </t>
    <t>Provider Identifying Data (octet string)
        <list>
            <t>
                The Provider Identifying Data is used to provide indication to
                the other party about which providers are supported. The data
                used in this field is left to be interpreted by the end-point
                and it is orthogonal to EAP-CREDS data types.
            </t>
            <t>
                For example, an end-point could use the string representation
                (i.e., dotted representation) of the Object Identifier (OID) that
                corresponds to the IANA's Private Enterprise Number (PEN) of the
                specific supported provider or of the Certificate Policy supported
                (e.g., the OID could be the OID of the supported Certificate Policy).
            </t>
        </list>
    </t>

    </section>
-->

<section anchor="tlv_control" title="The Phase-Control TLV">

      <figure><artwork><![CDATA[
  0                   1           
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |S|   Phase     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Phase-Control TLV</t>
        </list>
    </t>
    <t>S (1 bit)
      <list>
        <t>
          Start or End -  If set to '0' (Start), this bit indicates that the message this
          TLV is embedded in, it is the first message for this phase (i.e., it marks the )
          If set to '1' (End), this bits indicates that the message this TLV
          is embedded in, it is the last message for this phase.
        </t>
      </list>
    </t>
    <t>Phase (7 bits)
      <list>
        <t>
          The Phase field is used to indicate which of the phases is ending or
          starting. This field should use only '1', '2', and '3' values for the
          current version of the EAP-CREDS/SPP specifications.
        </t>
      </list>
    </t>
  </section>

<section anchor="tlv_profiles" title="The Profile TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                    Profile Identifying Data                  ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Profile Identifying Data TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>4 octets</t>
        </list>
    </t>
    <t>Profile Identifying Data (octet string)
        <list>
            <t>
                The Profile Identifying Data is used to provide indication to
                the other party about which profiles are supported when requesting
                credentials management.
            </t>
            <t>
                Also in this case, the data used in this field is left to be
                interpreted by the end-point and it is orthogonal to EAP-CREDS data
                types.
            </t>
            <t>
                An example of values for this field, an end-point could use the
                string representation (i.e., dotted representation) of the
                Object Identifier (OID) of the specific profile supported (e.g., could
                be defined in the Certificate Policy of the credentials' provider).
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_protocols" title="The Protocol TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |        Protocol ID              |   Version   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Protocol TLV</t>
        </list>
    </t>
    <t>Protocol ID (uint16)
        <list>
            <t>
                The Protocol ID value carries the id of a supported provisioning
                protocol. The initial values for the provisioning protocol identifiers
                can be found in <xref target="iana_proto" />.
            </t>
        </list>
    </t>
    <t>Version
        <list>
            <t>
                The Version (Protocol Version) value represents the
                specific version of the identified provisioning protocol. 
                When no version is specified for a protocol (i.e., either it does
                not support multiple versions or it does not matter), the
                value of this field should be set to '0x0'.
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_prov_data" title="The Provisioning-Data TLV">
      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                         Provisioning Data                    ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
      <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Provisioning-Data TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>3 octets</t>
        </list>
    </t>
    <t>Headers Data (> 1 octet)
        <list>
            <t>
                This field carries the provisioning protocol's messages.
            </t>
        </list>
    </t>
    </section>

<section anchor="tlv_prov_headers" title="The Provisioning-Headers TLV">
      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                           Headers Data                       ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
      <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Provisioning-Headers TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>3 octets</t>
        </list>
    </t>
    <t>Headers Data (> 1 octet)
        <list>
            <t>
                This field carries the meta-data (if any) that might be
                associated with the transport-layer normally used with the
                provisioning protocol. For example, this TLV can carry the
                set of HTTP headers required by EST or ACME.
            </t>
        </list>
    </t>
    </section>

<section anchor="tlv_prov_params" title="The Provisioning-Params TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |            Min Length         |          Max Length           |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Algorithm   |     Flags     |     OBJECT IDENTIFIER (DER)  ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Provisioning-Params TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>Provides the length of the TLV (>= 4 octets)</t>
        </list>
    </t>
    <t>Min Length (uint16)
        <list>
            <t>
                Provides the indication minimum size of the credentials. This
                value has meaning depending on the context of the credentials,
                however sizes are always expressed in bytes.
            </t>
            <t>
                For example, when used with a symmetric key or a password, the
                ('Min Length') and ('Max Length') refer to the minimum and
                maximum size of the password data. The ('Algor OID') field can
                be omitted in this case.
            </t>
            <t>
                On the other hand, when referring public-key credentials, this
                field should carry the size of the modulus of the key. For example,
                for an RSA 2048 bit keys, the field should carry the value of 256.
                For an ECDSA that uses the prime256r1 curve, this field should
                carry the value of 32 and the Algor OID should be the DER
                representation of the specific value of the curve (i.e., the DER
                representation of '1.2.840.10045.3.1.7').
            </t>
        </list>
    </t>
    <t>Max Length (uint16)
        <list>
            <t>
                Provides the indication maximum size of the credentials. This
                value has meaning depending on the context of the credentials,
                however sizes are always expressed in bytes.
            </t>
            <t>
                The same considerations apply to this field as well as the
                ('Min Length') one discussed above.
            </t>
        </list>
    </t>
    <t>Flags (uint8)
        <list>
            <t>
                Provides a BITMASK that can be used to provide information
                about the status of the credentials (e.g., if the use marks the
                credentials to be compromised). The bits have the following
                meaning:
                <list>
                    <t>Bit 0 - Credentials (or part of it) are to be generated on the server</t>
                    <t>Bit 1 - Credentials (or part of it) are to be generated on the peer</t>
                    <t>Bit 2 - Credentials are to be generated on dedicated hardware</t>
                    <t>Bit 3 - Reserved</t>
                    <t>Bit 4 - Reserved</t>
                    <t>Bit 5 - Reserved</t>
                    <t>Bit 6 - Reserved</t>
                    <t>Bit 7 - Reserved</t>
                </list>
            </t>
            <t>
              When using public-key based credentials, the bits 0 and 1 are mutually exclusive.
            </t>
            <t>
              When using passwords or shared secrets, if bit 0 is set, then the secret is generated
              by the server and then sent to the client. On the other hand, if bit 1 is set, then the
              secret is generated by the peer and then sent to the server. Ultimately, if both bits
              are set, then the Peer generates the first part of the password and sends it to the
              Server, while the Server generates the second part of the password and sends it to the
              Peer. The password to be used for future authentication is the concatenation of the
              two shares of the password: first the one from the Server, then the one from the Client.        
            </t>
            <t>
              Last but not least, since these passwords/secrets are meant to be used in a automated
              fashion, there is no restriction around the character set to use or their interpretation.
              Therefore, we suggest to generate full random passphrases (on client and server) to
              maximize the randomness carried within the secret.
            </t>
        </list>
    </t>
    <t>Algorithm (uint8)
        <list>
            <t>
                Provides the indication of the algorithm used for the generation of
                the credentials. The allowed values for this field are listed in 
                <xref target="iana_creds_algor_table" />.
            </t>
        </list>
    </t>
    <t>Object Identifier (binary; > 1 octet)
        <list>
            <t>
                Provides the indication of additional parameters that need to be
                encoded for the credentials. This value is used only when the
                credentials use public-key cryptography - this field carries
                additional information about the algorithm to be used.
                We provide some useful values that can be used as reference:
            </t>
        </list>
    </t>
    <texttable anchor="oid_table" title="Object Identifiers Examples">
      <ttcol align="left">OID Name</ttcol>
      <ttcol align="center">Dotted Representation</ttcol>
      <ttcol align="center">Binary Encoding</ttcol>
      <c>secp256r1 curve</c>
      <c>1.2.840.10045.3.1.7</c>
      <c>06 08 2A 86 48 CE 3D 03 01 07</c>
        
      <c>secp384r1 curve</c>
      <c>1.2.840.10045.3.1.34</c>
      <c>06 08 2A 86 48 CE 3D 03 01 22</c>

      <c>secp521r1 curve</c>
      <c>1.2.840.10045.3.1.35</c>
      <c>06 08 2A 86 48 CE 3D 03 01 23</c>
        
      <c>X25519 curve</c>
      <c>1.3.101.110</c>
      <c>06 03 2B 65 6E</c>

      <c>X25519 curve</c>
      <c>1.3.101.110</c>
      <c>06 03 2B 65 6E</c>

      <c>X448 curve</c>
      <c>1.3.101.111</c>
      <c>06 03 2B 65 6F</c>

      <c>Ed25519 curve</c>
      <c>1.3.101.112</c>
      <c>06 03 2B 65 70</c>

      <c>Ed448 curve</c>
      <c>1.3.101.113</c>
      <c>06 03 2B 65 71</c>
    </texttable>
    
    </section>

    <section anchor="tlv_cert_request" title="The Certificate-Request TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Encoding    |    Format     |            Value             ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Token-Data TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>Provides the length of the TLV (> 3 octets)</t>
        </list>
    </t>
    <t>Encoding (uint8)
        <list>
            <t>
                Provides the indication of the Encoding the credentials are in. The
                allowed values for this field are listed in 
                <xref target="iana_creds_encoding_table" />.
            </t>
        </list>
    </t>
    <t>Format (uint8)
        <list>
            <t>
                Provides the indication of the type of credentials. The allowed
                values for this field are listed in <xref target="iana_creds_data_table" />.
            </t>
        </list>
    </t>
    <t>CredsEnc (uint8)
        <list>
            <t>
                Provides the indication of the Encoding of the credentials are expected in.
                This provides the indication to the Server of the capability
                allowed values for this field are listed in 
                <xref target="iana_creds_encoding_table" />.
            </t>
        </list>
    </t>
    <t>CredsFormat (uint8)
        <list>
            <t>
              Provides the format the credentials is expected in. The allowed values for
              this field are listed in <xref target="iana_creds_data_table" />.
            </t>
        </list>
    </t>
    <t>Value (octet string)
        <list>
            <t>
                This field carries the data for the credentials.
            </t>
        </list>
    </t>
    </section>


<section anchor="tlv_storage_info" title="The Storage-Info TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |     Flags     |           Spare Slots         |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                          Available Memory                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>

    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Store-Info TLV</t>
        </list>
    </t>
    <t>Flags (8 bits)
        <list>
            <t>
              Provides information about the status and type of store and limited information
              about its capabilities. The bits have the following meaning:
              <list>
                  <t>Bit 0 - If set, the store supports RSA keys (software)</t>
                  <t>Bit 1 - If set, the store supports RSA keys (hardware)</t>
                  <t>Bit 2 - If set, the store supports ECDSA keys (software)</t>
                  <t>Bit 3 - If set, the store supports ECDSA keys (hardware)</t>
                  <t>Bit 4 - If set, the store supports symmetric keys</t>
                  <t>Bit 5 - If set, the store supports generic tokens</t>
                  <t>Bit 6 - If set, the store is immutable (no key generation or deletion)</t>
                  <t>Bit 7 - Not Used</t>
              </list>
            </t>
        </list>
    </t>
    <t>Spare Slots (uint16)
        <list>
            <t>
                Provides the number of available slots where to store credentials. When no more
                slots are available, the value of '0' should be used to indicate to the Server
                that a credential must be deleted before a new one can be created.
            </t>
            <t>
                When the number of slots is not fixed or not known, the value of { 0xFF, 0xFF }
                shall be used.
            </t>
        </list>
    </t>
    <t>Available Memory (uint32)
        <list>
            <t>
                This field carries the size (in bytes) of the spare memory on the Peer's secrets'
                store.
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_suppoorted_formats" title="The Supported-Formats TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |    TLV Type   |                    Length                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Format    |      Format       ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

]]></artwork></figure>

    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Supported-Formats TLV</t>
        </list>
    </t>
    <t>Format (uint8)
        <list>
            <t>
                Provides one or more supported formats for the credentials <xref target="iana_creds_data_table" />.
                This TLV can contain 1 or more values of the format.
            </t>
        </list>
    </t>

    </section>

    <section anchor="tlv_supported_encoding" title="The Supported-Encoding TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                    Length                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Encoding    |     Encoding       ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

]]></artwork></figure>

    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Store-Info TLV</t>
        </list>
    </t>
    <t>Encoding (uint8)
        <list>
            <t>
                Provides the indication of the supported Encoding by the End Point.
                This provides the indication to the Server of the capability of the
                Peer. The allowed values for this field are listed in 
                <xref target="iana_creds_encoding_table" />.
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_auth_token" title="The Token-Data TLV">

      <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |                  TLV Length                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |  Token Type   |    Encoding   |             Value            ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Token-Data TLV</t>
        </list>
    </t>
    <t>Length (uint24)
        <list>
            <t>Provides the length of the TLV (> 3 octets)</t>
        </list>
    </t>
    <t>Token Type (uint8)
        <list>
            <t>
                Provides the indication of the type of credentials. The allowed
                values for this field are listed in <xref target="iana_token_table" />.
            </t>
        </list>
    </t>
    <t>Encoding (uint8)
        <list>
            <t>
                Provides the indication of the Encoding the credentials are in. The
                allowed values for this field are listed in 
                <xref target="iana_creds_encoding_table" />.
            </t>
        </list>
    </t>
    <t>Value (octet string)
        <list>
            <t>
                This field carries the data for the credentials.
            </t>
        </list>
    </t>
    </section>

<section anchor="tlv_version" title="The Version TLV">

      <figure><artwork><![CDATA[
  0                   1           
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TLV Type    |   Version     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork></figure>
    <t>TLV Type (uint8)
        <list>
            <t>&lt;TBD&gt; - Version TLV</t>
        </list>
    </t>
    <t>Version (uint8)
        <list>
            <t>
                The Version field is a uint8 value and represents the specific
                version of the EAP-CREDS protocol that are supported by the end
                point. When multiple versions of EAP-CREDS are supported, multiple
                ('Version') TLVs can be used.
            </t>
            <t>
                When no version is specified (i.e., either it does
                not support multiple versions or it does not matter), the
                value of this field should be set to '0x0'.
            </t>
        </list>
    </t>

    </section>

  </section>

  </section>

    </section>

    <section anchor="creds_msg_types" title="EAP-CREDS Messages">
        <t>
            This section describes each message and what TLVs are allowed or required.
            EAP-CREDS defines the following values for the Message Type (Type):
        </t>
        <texttable anchor="eap_creds_msgs_table" title="EAP-CREDS Message Types">
          <ttcol align="center">Message Type</ttcol>
          <ttcol align="left">Name</ttcol>
          <ttcol align="left">Description</ttcol>
          <c>0</c>
          <c>EAP-CREDS-Init</c>
          <c>Initialization Phase</c>
          <c>1</c>
          <c>EAP-CREDS-ProtoFlow</c>
          <c>Carries Provisioning Protocol Messages</c>
          <c>2</c>
          <c>EAP-CREDS-Validate</c>
          <c>Validates newly installed credentials</c>
        </texttable>

        <section anchor="creds_msg_init" title="The EAP-CREDS-Init Message">
            <t>
                The EAP-CREDS-Init message type is used in Phase One only of EAP-CREDS. The
                message flow is depicted in <xref target="creds_phase_one" />. This message
                supports the following TLVs: Version, Protocol, Credentials-Info, and Error.
            </t>

            <section anchor="creds_msg_server_init" title="EAP Server's Init Message">
                <t>
                    EAP-CREDS starts with an ('EAP-CREDS-Init') message from the server. This
                    message MAY contain zero, one, or more ('Version') TLVs and, optionally, a
                    ('Challenge-Data') TLV.
                </t>
                <t>
                    The Server uses one or more ('Version') TLVs in the EAP-Request/EAP-CREDS(Type=Init)
                    message to provide the Peer with the list of EAP-CREDS versions supported. If omitted,
                    the implict version of EAP-CREDS used in the session is one ('0x1').
                    If the Server detects multiple occurrences of this TLV in the reply from the Peer,
                    an error shall be issued and the EAP-CREDS session should be terminated.
                </t>
                <t>
                    In case Token-Based registration is enabled on the Server, the Server SHOULD
                    include, in its Init message, a ('Challenge-Data') field that can be used by
                    the client to provide reply protection, and (unique) challenge data for
                    proof-of-possession of secrets.
                </t>
            </section>

            <section anchor="creds_msg_peer_init" title="EAP Peer's Init Message">
                <t>
                    The Peer MUST reply to the Server's ('EAP-CREDS-Init') message with its own
                    ('EAP-CREDS-Init') one. The Peer one Version TLV
                    in the EAP-Response/EAP-CREDS(Type=Init) message to indicate the
                    version of EAP-CREDS that the client wants to use for the
                    session. The Peer MUST also provide the list of supported provisioning
                    protocols (via the 'Protocol' TLV), the list and status of the installed
                    credentials (via the 'Credentials-Info' TLV). The Peer MAY include
                    authorization data when registering new credentials (e.g., an authorization
                    token or a device certifcate).
                </t>
                <t>
                    The Peer MUST include one ('Credentials-Info') TLV for each credential the
                    Network is authorized to manage. Typically, a Peer will include only one
                    ('Credentials-Info') TLV in its ('EAP-CREDS-Init') message, but there might
                    be cases where multiple types of credentials are available (e.g., X.509
                    certificate and username/password combination) and used depending on
                    the location and other factors.
                </t>
                <t>
                    In case the Peer does not have any credentials available yet, it does not
                    add any ('Credentials-Info') TLV - leaving the Server with the only action
                    possible: Registration.
                </t>

                <section anchor="creds_msg_peer_init_token" title="Bootstrapping Peer's Trustworthiness">
                    <t>
                        The Registration process might rely on information exchanged during the
                        Provisioning Process in Phase Two, however, if an authorization mechanism
                        is not available, EAP-CREDS provides a simple machanism for the Peer to
                        leverage an out-of-band token/passphrase/ott that is available (or can easily
                        be made available) on the Peer and that can be verified by the Server.
                    </t>
                    <t>
                        In particular, when the Peer wants to register new credentials (and the Server
                        requires the use of authorization because, for example, the Peer does not
                        have any credentials yet) it may need to provide (a) a Token, (b) a challenge
                        value, and (c) a response to the challenge value. To do so, the Peer MUST
                        encode the token in a ('Token-Data') TLV, the challenge value in a ('Challenge-Data')
                        TLV, and, finally, the response to the challenge in the ('Challenge-Response')
                        TLV.
                    </t>
                    <t>
                        The use of ('Challenge-Data') and ('Challenge-Response') TLVs is optional, however
                        it is suggested that if a token is used for bootstrapping the trust, it should
                        provide a way to verify a secret associated with it.
                    </t>
                    <t>
                        It is also very important that the authorization token is disclosed only to
                        authorized servers - the Peer MUST NOT disclose authorization tokens that are
                        not meant for the network that is being accessed. This can be done, usually,
                        by verifying the identity of the Server first (in the outer mechanism) and then
                        verify that the target of the Token is the Server the Client is talking to.
                    </t>
                </section>

            </section>

<!--
            <section anchor="creds_msg_init_provider_tlv" title="The IdProvider TLV">
                <t>
                    The IdProvider TLV is used to convey the list of supported providers that can be
                    used for managing credentials (e.g., a list of identity providers).
                </t>
                <t>
                    The Server uses one or more IdProvider TLVs in the EAP-Request/EAP-CREDS(Type=Init)
                    message to provide the Peer with the list of supported credentials providers. The server
                    can omit the set of TLVs in case a single provider is supported (or if the selection of the
                    provider is done based on different factors - e.g., the authenticated credentials via
                    the tunneling mechanism).
                </t>
                <t>
                    The Peer, on the other hand, MAY include only one IdProvider TLV
                    in the EAP-Response/EAP-CREDS(Type=Init) message to indicate which provider
                    it wants the Server to use. The Peer MUST pick from the list provided in the
                    message from the server. If the client does not support any of the providers
                    listed in the Server's message or if no selection is provided and the Peer
                    requires a specific provider, then an EAP-Response/EAP-CREDS(Type=Init) with
                    an EAP-CREDS-Err TLV MUST be sent to the server as a response.
                </t>
            </section>
-->

        </section>

        <section anchor="creds_msg_protoflow" title="The EAP-CREDS-ProtoFlow Message">

            <t>
                The EAP-CREDS-ProtoFlow message type is used in Phase Two only of EAP-CREDS. The
                message flow is depicted in <xref target="creds_phase_two" />. This message type
                supports the following TLVs: Protocol, Credentials-Info, Provisioning-Headers,
                Provisioning-Data, Token-Data, Phase-Control, and Error.
            </t>
            <t>
                After the exchange of the initial two ('EAP-CREDS-Init') messages, the Server
                MAY start phase two by issuing an ('EAP-CREDS-ProtoFlow') message for the Peer
                where it encodes all the required details for starting the provisioning process.
                In particular, the server sends the selected ('Action'), ('Protocol'),
                ('Credentials-Info'), and metadata to the client in a
                EAP-Request/EAP-CREDS(Type=ProtoFlow) message. The ('Phase-Control') TLV MUST
                also be included with the 'S' bit set to '1' (Start) and the value set to '2'
                (Phase Two begins).
            </t>
            <t>
                <list>
                    <t>
                        NOTE WELL:
                        After the initial message, the only TLVs that are allowed in
                        messages coming from the server are the usual ('Provisioning-Headers')
                        ('Provisioning-Data'), and ('Error').
                   </t>
               </list>
            </t>
            <t>
                The client checks that all the selected parameters are supported for the selected
                credentials and, if no errors are detected, it sends its first ('EAP-CREDS-ProtoFlow')
                message to the Server with the ('Provisioning-Headers') and ('Provisioning-Data')
                TLVs only.
            </t>
            <t>
                From now on, the conversation between the Peer and the Server continues until
                an error is detected or the provisioning protocol completes successfully.
            </t>
            <t>
                If no other actions, the server MAY continue with phase three or issue a
                success message and terminate the EAP session. In order to terminat
            </t>
            <t>
                <list>
                    <t>
                        NOTE WELL:
                        When the SPP protocol is used, the protocol messages that are encoded
                        inside the ('Protocol-Data') TLV are composed of sets of TLVs as
                        defined in this document. The overall message size is provided by
                        the size of the ('Protocol-Data') TLV that encapsulates the SPP-specific
                        TLVs. This design choice provides symmetry in implementing support for
                        SPP when compared to other (available) provisioning protocols. 
                    </t>
                </list>
            </t>
            <t>
                In order to conclude Phase Two, the message from the Server MUST carry a
                ('Phase-Control') TLV with the 'S' bit set to '0' (end of phase) and the
                value should be set to '2' (Phase Two Ends).
            </t>

        </section>

        <section anchor="creds_msg_validate" title="The EAP-CREDS-Validate Message">
            <t>
                The EAP-CREDS-ProtoFlow message type is used in Phase Three only of EAP-CREDS. The
                message flow is depicted in <xref target="creds_phase_three" />. This message type
                supports the following TLVs: Protocol, Credentials-Info, Provisioning-Headers,
                Provisioning-Data, Token-Data, and Error.
            </t>
            <t>
                After Phase One (and/or Phase Two) ends, the Server MAY start phase three by issuing an
                ('EAP-CREDS-Validate') message for the Peer where it encodes all the required details
                for starting the validation process.
            </t>
            <t>
                In particular, the server sends the ('Credentials-Info'), a ('Challenge'),
                and the ('Phase-Control') TLVs in a EAP-Request/EAP-CREDS(Type=Validate) message.
                The ('Phase-Control') TLV should carry the '1' value for the 'S' bit (Start) and the
                number '3' for its value (Phase Three begins).
            </t>
            <t>
                The Peer generates the answer to the Challenge and sends back a EAP-Response/EAP-CREDS(Type=Validate)
                message with the ('Challenge-Response') and an optional ('Challenge') field (only for
                server-side validation of the symmetric credentials). If the Peer requested server-side
                validation of the credentials, the Server MUST include (if a symmetric secret) the
                response to the Peer-issued ('Challenge') TLV by computing the response and adding it
                to the ('Challenge-Response') TLV in its reply.
            </t>
            <t>
                Finally, in the last message, the Server (if Phase Three is to be ended) SHALL include
                the ('Phase-Control') TLV with the 'S' bit set to '0' (end of phase) and the value set
                to '3' (Phase Three ended).
            </t>
            <t>
                At this point, EAP-CREDS has terminated all possible operations and can be terminated.
                The Server can now terminate the EAP session successfully. In case the Peer was not
                authenticated during the tunnel establishment (i.e., no credentials were already
                available on the Peer), the Server should terminate the EAP session with a Failure
                (thus requiring the device to re-attach and authenticate to the network - phase two
                should have provided the Peer with the credentials to use for authenticating to the
                Network).
            </t>

            <section anchor="eap_creds_hashing" title="Algorithm Requirements">
                <t>
                    EAP-CREDS uses the SHA-256 hashing algorithm to verify credentials in phase three
                    of the protocol. Peers and Servers MUST support SHA-256 for this purpose.
                </t>
            </section>
        </section>

    </section>

  <section anchor="err_handling" title="Error Handling in EAP-CREDS">
    <t>
      This section provides a description of the error handling by
      using the CREDS-Error-TLV in a CREDS message.
    </t>
  </section>

  <section anchor="frag" title="Fragmentation">
    <t>
      Although EAP does not directly support handling of fragmented packets,
      EAP-CREDS requires that its messages are encapsulated via an outer
      method that MUST provide fragmentation support.
    </t>
    <t>
      Because of the outer method requirements in particular, removing any
      support for fragmented messages in EAP-CREDS removes the duplication
      of packets (e.g., Acknowledgment Packets) sent across the Peer and
      the Server, thus resulting in a smaller number of exchanged messages
    </t>
  </section>

    <section anchor="teap_creds" title="Encapsulating Provisioning Protocols in EAP-CREDS">
      <t>
          In order to use EAP-CREDS together with your favorite provisioning protocol, the messages
          from the provisioning protcol need to be sent to the other party. In EAP-CREDS, this is
          done by putting the provisioning protocol messages inside the ('Provisioning-Data') TLV.
          In case the provisioning protocol uses additional data for its operations (e.g., uses
          HTTP Headers), this data can be encoded in a separate ('Provisioning-Headers') TLV.
      </t>
      <t>
          Since the implementation of the provisioning endpoint could happen in a (logically or
          physically) different component, a method is needed to identify when a provisioning
          protocol has actually ended. In EAP-CREDS, when the provisioning protocol is over, when
          an empty message is sent by the Server (not the Peer).
      </t>
      <t>
          In the first message of Phase Two, the Server provides the client with all the selected
          parameters for one specific credential that needs attention (or for a new credential)
          to be registered with the network. In particular, the server provides the ('Version')
          TLV (optional), the ('Protocol') TLV, the ('Action') TLV, and the ('Provisioning-Params')
          TLV.
      </t>
      <t>
          After checking the parameters sent by the Server, if the Peer does not support any of
          them, it MUST send a message with one single ('Error') TLV with the appropriate error
          code(s). The server, can then decide if to manage a different set of credentials (if
          more where reported by the Peer in its Phase One message) or if to terminate the EAP
          session with an error.
      </t>
      <t>
          The Peer and the Server exchange ProtoFlow messages until an error is detected and the
          appropriate error message is sent to the other party. If the error message was sent by
          the Peer, then the Server MAY send an empty message to the Peer and terminate the session,
          or it MAY try to restart Phase Two for a different set of credentials or with a different
          action (same target and action MUST not be repeated in the same EAP-CREDS session).
      </t>
    </section>

    <section anchor="eap_creds_creds" title="EAP-CREDS and Simple Provisioning Protocol (SPP)">
      <t>
        EAP-CREDS supports a Simple Provisioning Protocol (SPP) which comprises a series of
        messages that enables the management not only of certificates, but also of other types
        of credentials like username/password pairs, asymmetric keys, and symmetric keys.
      </t>
      <t>
        The Simple Provisioning Protocol (SPP), described in this section, behaves as any other
        provisioning protocol: its messages are encapsulated in the ('Provisioning-Data') TLVs
        in the second phase of the protocol.
      </t>
      <t>
        When no ('Credentials-Info') TLVs have been provided by the client, the Server knows
        that the device does not have valid credentials it wants to use to access the Network.
        In this case, EAP-CREDS/SPP supports the use of Tokens to kick-off the registration
        process. The type, format, or encoding of the Token is orthogonal to EAP-CREDS/SPP
        which treats the token as a black-box field (i.e., it does not try to interpret or
        parse its contents).
        <list>
            <t>
                NOTE WELL: During Phase One, the Peer MAY include the ('Token-Data') TLV
                in its EAP-CREDS-Init message to provide the needed authorization to
                register a new set of credentials. The Server might not allow the registration
                of new credentials if the required authorization (i.e., the Token) was not
                provided during the initialization phase.
            </t>
        </list>
        In the case where an authorization Token MUST be used and it is not just a bearer token
        but it can be used (or a secret identified in it) to generate a verifiable proof-of-possession,
        the Peer can include a ('Challenge-Data') and a ('Challenge-Response') TLVs.
      </t>
      <t>
        The ('Challenge-Data') TLV MUST be used to convey the challenge data (usually some random value), if any.
        If the Server provided a ('Challenge-Data') TLV, then the Peer MUST use the same TLV in its message (and
        to calculate the response).
      </t>
      <t>
        The ('Challenge-Response') TLV is used, instead, to encode the response to the challenge data that can
        be generated by the Peer and verified by the Server.
        <list>
            <t>
                NOTE WELL: The use of the ('Token-Data'), ('Challenge-Data'), and ('Challenge-Response')
                TLVs in the Peer's Init message can be used to bootstrap trust between the server and
                the client.
            </t>
        </list>
     </t>

      <section anchor="eap_creds_spp_encoding" title="SPP Message Format">
        <t>
            The SPP Messages are constructed with zero, one, or more TLVs and encoded in the
            ('Provisioning-Data') TLV. The size of the encpasulating ('Provisioning-Data') TLV
            provides the size of the whole message.
        </t>
      </section>

      <section anchor="eap_creds_spp_registration" title="SPP Message Flow">
        <figure><artwork><![CDATA[
            
 ,--------.                                 ,----------.
 |EAP Peer|                                 |EAP Server|
 `---+----'                                 `----+-----'
     | [1] EAP-Request/EAP-CREDS(Type=ProtoFlow) |      
     |   { Protocol(=SPP), Action,               |      
     |     PhaseCtrl(=START), [ Params ],        |      
     |     [ ProvData(=CredsData) ] }            |      
     | <------------------------------------------      
     |                                           |      
     | [2] EAP-Response/EAP-CREDS(Type=ProtoFlow)|      
     |   { [ ProvData(=CredsData) ]}             |      
     | ------------------------------------------>      
     |                                           |      
     | [3] EAP-Response/EAP-CREDS(Type=ProtoFlow)|      
     |   { [ ProvData(=CredsData) ]              |      
     |     PhaseCtrl(=END) }                     |      
     | <------------------------------------------      
     |                                           |      
     |                                           |      

]]></artwork></figure>

        <t>
          EAP-CREDS defines several actions for a set of credentials. The identified actions are
          listed in <xref target="iana_action_table" />. In particular, when a Peer wants to
          join a network but it does not have the needed credentials to do so (and it provided
          the required authorization/authentication Token data), the Server MAY start Phase Two
          with the intention of registering a new set of credentials.
        </t>
        <t>
          In this case, the first message from the Server, shall not contain a ('Credentials-Info')
          TLV since there is no targeted credentials that apply for this operation (i.e., for
          other actions - like 'renew' or 'delete' - the TLV would identify the right set of
          credentials to renew or delete).
        </t>
        <t>
          The Server also sets the ('Protocol') TLV to SPP, the ('Action') TLV to 'Register'
          or 'Renew', the ('Provisioning-Params') TLV (or Params) to the type of needed
          credentials (and relevant constraints).
        </t>
        <t>
          If the type of credentials is symmetric and the params call for server-side generation
          of a key share, the Server MUST include its own generated share in a ('Credentials-Data')
          TLV inside the ('Provisioning-Data') one (the data for the provisioning protocol are
          encapsulated in the 'Provisioning-Data' TLV for any protocol used during Phase Two - SPP
          is no exception to this rule). 
        </t>
        <t>
          The Peer replies to the Server's message with its own 'ProtoFlow' response. The response
          shall carry its own generated share of the key (if the credentials that are provisioned
          are symmetric and the configuration called for a share of the key to be provided by the
          Peer) or the PKCS#10 request (encoded in the 'Provisioning-Data' TLV) in case client-side
          generation was specified in the ('Provisioning-Params'). Otherwise, if no client-side
          generation was specified, the ('Provisioning-Data') TLV must still be present with a
          length of zero ('0x0') bytes.
        </t>
        <t>
          The last message is then from the Server. In case the credentials being provisioned are
          Certificate-based, the Server MUST include the issued certificate in its reply. The
          issued credentials shall be encoded in a ('Credentials-Data') TLV inside the
          ('Provisioning-Data') one. In case that the format supported/selected by the Peer and
          the Server does not provide the possibility to encode the full chain (i.e., intermediate
          and Root CAs) in the response, the Server MUST add one ('Certificate-Data') TLV for each
          certificate in the chain (including the Root CA's certificate).
        </t>
        <t>
          If the message from the Server marks the end of the last phase of EAP-CREDS, the Server
          MUST include the ('Phase-Control') TLV with the 'S' bit set to '0' (end of phase) and the
          value set to '3' (Phase Three ends) and the EAP session can now be safely terminated.
        </t>

        <section anchor="eap_creds_spp_password" title="SPP Password Provisioning">
          <figure><artwork><![CDATA[

 ,--------.                                 ,----------.
 |EAP Peer|                                 |EAP Server|
 `---+----'                                 `----+-----'
     | [1] EAP-Request/EAP-CREDS(Type=ProtoFlow) |      
     |   { Protocol(=SPP), Action,               |      
     |     PhaseCtrl(=START), [ Params ],        |      
     |     [ ProvData(=CredsData) ] }            |      
     | <------------------------------------------      
     |                                           |      
     | [2] EAP-Response/EAP-CREDS(Type=ProtoFlow)|      
     |   { [ ProvData(=CredsData) ]}             |      
     | ------------------------------------------>      
     |                                           |      
     | [3] EAP-Response/EAP-CREDS(Type=ProtoFlow)|      
     |   { [ ProvData(=CredsData) ]              |      
     |     PhaseCtrl(=END) }                     |      
     | <------------------------------------------      
     |                                           |      
     |                                           |      

]]></artwork></figure>
          <t>
            EAP-CREDS/SPP can provision symmetric secrets or bearer's tokens like username/password
            combination, an OAuth token, or a symmetric key.
            The message flow is provided in <xref target="eap_creds_spp_password" />
          </t>
          <t>
            EAP-CREDS/SPP provides the possibility for shared secret to be generated in different
            ways:
            <list style="numbers">
                <t>Server-Side Generated</t>
                <t>Client-Side Generated</t>
                <t>Both Sides Generate a share</t>
            </list>
            In particular, when initiating the second phase of the protocol, the ('Provisioning-Params')
            TLV is used to specify how to generate the secret (see <xref target="tlv_prov_params" />).
          </t>
        </section>

      </section>

      <section anchor="eap_creds_spp_renewal" title="SPP: Renewing Credentials">
      </section>

      <section anchor="eap_creds_spp_delete" title="SPP: Removing Credentials">
      </section>

      <section anchor="eap_creds_spp_certificate" title="SPP Certificate Provisioning">
        <t>
            EAP-CREDS/SSP defines the following flow of messages for requesting the provisioning
            of credentials. 
        </t>
      </section>

    </section>

    <section anchor="iana" title="IANA Considerations">
        <t>
            This document uses a new EAP type, EAP-CREDS, whose value (TBD) MUST be allocated by IANA from
            the EAP TYPEs subregistry of the RADIUS registry.
            This section provides guidance to the Internet Assigned Numbers Authority (IANA) regarding
            registration of values related to the EAP-CREDS protocol, in accordance with <xref target="RFC8126" />.
        </t>

        <t>
            The EAP Method Type number for EAP-CREDS needs to be assigned.
        </t>

        <t>
            This document also requires IANA to create new registries as defined in
            the following subsections.
        </t>

        <section anchor="iana_proto" title="Provisioning Protocols">

            <texttable anchor="iana_proto_table" title="EAP-CREDS Inner Protocol Identifiers">
                <ttcol align="center">Message Type</ttcol>
                <ttcol align="left">Purpose</ttcol>
                <c>0</c>
                <c>Unspecified</c>
                <c>1</c>
                <c>Simple Provisioning Protocol (SPP)</c>
                <c>2</c>
                <c>Basic Certificate Management Protocol (CMP-S)</c>
                <c>3</c>
                <c>Full Certificate Management Protocol (CMP-F)</c>
                <c>4</c>
                <c>Enrollment over Secure Transport (EST)</c>
                <c>5</c>
                <c>Certificate Management over CMS (CMC)</c>
                <c>6</c>
                <c>Automatic Certificate Management Environment (ACME)</c>
                <c>...</c>
                <c>...</c>
                <c>49141 ... 65534</c>
                <c>Vendor Specific</c>
            </texttable>

            <t>
                Assignment of new values for new cryptosuites MUST be done through
                IANA with "Specification Required" and "IESG Approval" as defined
                in <xref target="RFC8126" />.
            </t>

        </section>

        <section anchor="iana_token" title="Token Types">

            <texttable anchor="iana_token_table" title="Token Types">
                <ttcol align="center">Token Type</ttcol>
                <ttcol align="left">Description</ttcol>
                <c>0</c>
                <c>Unspecified</c>
                <c>1</c>
                <c>JWT</c>
                <c>2</c>
                <c>Kerberos</c>
                <c>3</c>
                <c>OAuth</c>
                <c>200..254</c>
                <c>Vendor Specific</c>
            </texttable>

            <t>
                Assignment of new values for new Message Types MUST be done through
                IANA with "Expert Review" as defined in <xref target="RFC8126" />.
            </t>
        </section>

        <section anchor="iana_creds_type" title="Credentials Types">

            <texttable anchor="iana_creds_type_table" title="Credentials Types">
                <ttcol align="center">Credentials Type</ttcol>
                <ttcol align="left">Description</ttcol>
                <c>0</c>
                <c>X.509 Certificate</c>
                <c>1</c>
                <c>Public Key</c>
                <c>2</c>
                <c>Symmetric Key</c>
                <c>3</c>
                <c>Username and Password</c>
                <c>4</c>
                <c>AKA Subscriber Key</c>
                <c>5</c>
                <c>Bearer Token</c>
                <c>6</c>
                <c>One-Time Token</c>
                <c>7</c>
                <c>API Key</c>
            </texttable>

            <t>
                Assignment of new values for new Message Types MUST be done through
                IANA with "Expert Review" as defined in <xref target="RFC8126" />.
            </t>

        </section>

        <section anchor="iana_creds_algor_type" title="Credentials Algorithms">

            <texttable anchor="iana_creds_algor_table" title="Credentials Algorithms">
                <ttcol align="center">ID</ttcol>
                <ttcol align="left">Algorithm</ttcol>
                <c>0</c>
                <c>None</c>
                <c>1</c>
                <c>RSA</c>
                <c>2</c>
                <c>ECDSA</c>
                <c>3</c>
                <c>XMMS</c>
                <c>4</c>
                <c>AKA Subscriber Key</c>
                <c>5</c>
                <c>OAuth</c>
                <c>6</c>
                <c>Kerberos4</c>
                <c>7</c>
                <c>Kerberos5</c>
                <c>200-254</c>
                <c>Reserved</c>
            </texttable>

            <t>
                Assignment of new values for new Message Types MUST be done through
                IANA with "Expert Review" as defined in <xref target="RFC8126" />.
            </t>

        </section>

        <section anchor="iana_creds_data_type" title="Credentials Datatypes">

            <texttable anchor="iana_creds_data_table" title="Credentials Datatypes">
                <ttcol align="center">ID</ttcol>
                <ttcol align="left">Data Type</ttcol>
                <c>0</c>
                <c>None (Binary)</c>
                <c>1</c>
                <c>PKCS#8</c>
                <c>2</c>
                <c>PKCS#10</c>
                <c>3</c>
                <c>PKCS#12</c>
                <c>4</c>
                <c>PublicKeyInfo</c>
                <c>200-254</c>
                <c>Reserved</c>
            </texttable>

            <t>
                Assignment of new values for new Message Types MUST be done through
                IANA with "Expert Review" as defined in <xref target="RFC8126" />.
            </t>

        </section>

        <section anchor="iana_creds_encoding_type" title="Credentials Encoding">

            <texttable anchor="iana_creds_encoding_table" title="Credentials Encoding">
                <ttcol align="center">ID</ttcol>
                <ttcol align="left">Encoding</ttcol>
                <c>0</c>
                <c>None (Raw)</c>
                <c>1</c>
                <c>DER</c>
                <c>2</c>
                <c>PEM</c>
                <c>3</c>
                <c>Base64</c>
                <c>4</c>
                <c>JSON</c>
                <c>5</c>
                <c>XML</c>
                <c>6</c>
                <c>ASCII</c>
                <c>7</c>
                <c>UTF-8</c>
                <c>200-254</c>
                <c>Reserved</c>
            </texttable>

            <t>
                Assignment of new values for new Message Types MUST be done through
                IANA with "Expert Review" as defined in <xref target="RFC8126" />.
            </t>

        </section>

        <section anchor="iana_creds_action" title="Action Types">

            <texttable anchor="iana_action_table" title="Action Types">
                <ttcol align="center">ID</ttcol>
                <ttcol align="left">Data Type</ttcol>
                <ttcol align="left">Description</ttcol>
                <c>0</c>
                <c>Registration</c>
                <c>Registers New Credentials</c>
                <c>1</c>
                <c>Renewal</c>
                <c>Renew an Existing Credential</c>
                <c>2</c>
                <c>Remove</c>
                <c>Removes an Existing Credential</c>
                <c>200-254</c>
                <c>n/a</c>
                <c>Reserved</c>
            </texttable>

            <t>
                Assignment of new values for new Message Types MUST be done through
                IANA with "Expert Review" as defined in <xref target="RFC8126" />.
            </t>

        </section>

        <section anchor="iana_usage_metadata_type" title="Usage Metadata Types">

            <texttable anchor="iana_usage_metadata_type_table" title="Usage Metadata Types">
                <ttcol align="center">Type</ttcol>
                <ttcol align="left">Description</ttcol>
                <c>0</c>
                <c>Binary (Unspecified)</c>
                <c>1</c>
                <c>MUD File</c>
                <c>2</c>
                <c>TEEP Manifest</c>
            </texttable>

            <t>
                Assignment of new values for new Message Types MUST be done through
                IANA with "Expert Review" as defined in <xref target="RFC8126" />.
            </t>

        </section>

    </section>

    <section anchor="security" title="Security Considerations">
        <t>
            Several security considerations need to be explicitly considered for the system administrators
            and application developers to understand the weaknesses of the overall architecture.
        </t>
        <t>
            The most important security consideration when deploying EAP-CREDS is related to the
            security of the outer channel. In particular, EAP-CREDS assumes that the communication
            channel has been properly authenticated and that the information exchanged between
            the Peer and the Server are protected (i.e., confidentiality and integrity).
        </t>
        <t>
          For example, if certificate-based authentication is used, the server presents a
          certificate to the peer as part of the trust establishment (or negotiation).
          The peer SHOULD verify the validity of the EAP server certificate and SHOULD also
          examine the EAP server name presented in the certificate in order to determine
          whether the EAP server can be trusted.  When performing server certificate validation,
          implementations MUST provide support for the rules in <xref target="RFC5280" /> for
          validating certificates against a known trust anchor.
        </t>

    </section>

    <section anchor="acks" title="Acknowledgments">
        <t>
            The authors would like to thank everybody who provided insightful comments and helped in the
            definition of the deployment considerations.
        </t>
    </section>

</middle>

<back>
<references title='Normative References'>

    &rfc2119;
    &rfc3748;
    <!-- &rfc3986; -->
    <!-- &rfc4501; -->
    &rfc4210;
    <!-- &rfc5019; -->
    <!-- &rfc5234; -->
    &rfc5272;
    &rfc5280;
    &rfc6402;
    &rfc7030;
    <!-- &rfc7170; -->
    &rfc8126;

</references>

<!--
<references title='Informative References'>

&ietf-acme-acme;

</references>
-->

<section anchor="ann_examples" title="EAP-CREDS Example Message Flow for Provisioning Standards">

  <section title="EAP-CREDS and CMP">
      <t>
          Describe how to use EAP-CREDS with CMP.
      </t>
  </section>

  <section title="EAP-CREDS and EST">
      <t>
          Describe how to use EAP-CREDS with EST.
      </t>
  </section>

  <section title="EAP-CREDS and CMS">
      <t>
          Describe how to use EAP-CREDS with CMS.
      </t>
  </section>

  <section title="EAP-CREDS and ACME">
      <t>
          Describe how to use EAP-CREDS with ACME.
      </t>
  </section>
</section>

</back>
</rfc>



