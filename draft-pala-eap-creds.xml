<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' [

    <!-- Normative References -->
    <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!-- <!ENTITY rfc3986 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml'> -->
    <!-- <!ENTITY rfc4501 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4501.xml'> -->
    <!ENTITY rfc3748 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3748.xml'>
    <!ENTITY rfc4210 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4210.xml'>
    <!-- <!ENTITY rfc5019 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5019.xml'> -->
    <!-- <!ENTITY rfc5234 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'> -->
    <!ENTITY rfc5272 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5272.xml'>
    <!ENTITY rfc5280 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml'>
    <!-- <!ENTITY rfc5280 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml'> -->
    <!ENTITY rfc6402 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6402.xml'>
    <!ENTITY rfc7030 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7030.xml'>
    <!ENTITY rfc7170 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7170.xml'>
    <!ENTITY rfc8126 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.8126.xml'>

    <!-- Informative References -->
    <!-- <!ENTITY ietf-acme-acme PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.I-D.ietf-acme-acme.xml'> -->
]>

<rfc category="std" docName="draft-pala-eap-creds-01" ipr="trust200902">
    
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc tocdepth="5"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

  <front>
  <title abbrev="EAP-CREDS">Credentials Provisioning and Management via EAP (EAP-CREDS)</title>
  <author initials="M.P." surname="Pala" fullname="Massimiliano Pala">
    <organization>CableLabs</organization>
    <address>
      <postal>
        <street>858 Coal Creek Cir</street>
        <city>Louisville</city>
        <region>CO</region>
        <code>80027</code>
        <country>US</country>
      </postal>
      <email>m.pala@openca.org</email>
      <uri>http://www.linkedin.com/in/mpala</uri>
    </address>
  </author>
 
  <date month="February" year="2019" />
  <area>Security</area>
  <workgroup></workgroup>
  <keyword>PKI</keyword>
  <keyword>EAP</keyword>
  <keyword>Provisioning</keyword>
  <abstract>
    <t>
        With the increase number of devices, protocols, and applications that rely on strong credentials
        (e.g., digital certificates, keys, or tokens) for network access, the need for
        a standardized credentials provisioning and management framework is paramount.

        The .1x architecture allows for entities (e.g., devices, applications, etc.) to authenticate to
        the network by providing a communication channel where different methods can be used to
        exchange different types of credentials.

        However, the need for managing these credentials (i.e., provisioning and renewal) is still a
        hard problem to solve.

        <vspace blankLines="1" />

        This specifications define how to support the provisioning and management of authentication
        credentials that can be exploited in different environments (e.g., Wired, WiFi, cellular, etc.)
        to users and/or devices by using EAP together with standard provisioning protocols.
   </t>
  </abstract>
</front>

<middle>

    <section title="Requirements notation">
        <t>
            The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in <xref target="RFC2119"/>.
        </t>
    </section>

    <section anchor="intro" title="Introduction"> 
        <t>
            Many environments are, today, moving towards requiring strong authentication when
            it comes to gain access to networks. The .1x architecture provides the network
            administrators with the possibility to check credentials presented by a device
            even before providing any IP service to it.

            <vspace blankLines="1" />

            However, the provisioning and management of these credentials is a hard problem
            to solve and many vendors opt for long-lived credentials that can not be easily
            revoked, replaced, or simply renewed.

            <vspace blankLines="1" />

            This specification addresses the problem of providing a simple-to-use and
            simple-to-deploy conduit for credentials management by extending the EAP
            protocol to support credentials provisioning and management functionality.

            In particular, the EAP-CREDS method defined here provides a generic framework
            that can carry the messages for provisioning different types of credentials.
            The method can be use as a stand-alone method or it can be used as an inner
            methods of EAP-TTLS, EAP-TEAP, or any other tunnelling method that can provide
            the required encryption and (at minimum) server-side authentication to deliver
            server-side generated secrets (e.g., private keys, passwords, secret keys, etc.)
        </t>
    </section>

    <section anchor="existing_solutions" title="Overview of existing solutions">
        <t>
            Currently there are many protocols that address credentials lifecycle management. In particular,
            when it comes to digital certificates, some of the most deployed management protocols are:

            <list style="symbols">
              <t>Certificate Management Protocol (CMP) <xref target="RFC4210" /></t>
              <t>Certificate Management over CMS (CMC) <xref target="RFC5272"/><xref target="RFC6402"/></t>
              <t>Enrollment over Secure Transport (EST) <xref target="RFC7030"/></t>
              <t>Automated Certificate Management Environment <!-- <xref target="I-D.ietf-acme-acme"/> --> </t>
            </list>

            However, none of these protocols provide native support for client that do not have IP connectivity
            yet (e.g., because they do not have network-access credentials, yet). The EAP-CREDS
            provides the possibility to use such protocols (i.e., message-based) by defining a series of
            messages that can be used to encapsulate the provisioning messages for the specified protocol.
            In particular, examples of the message flow for the major provisioning protocols are provided
            in Annex <xref target="ann_examples" />.

            <vspace blankLines="1" />

            In addition to these protocols, EAP-CREDS also defines a series of simple
            messages that provide a generic enrollment protocol that allows not only
            certificates but also other types of credentials (e.g., username/password pairs
            or symmetric secrets) to be delivered to the client as part of the provisioning
            and/or renewal process. The set of messages that make up the generic
            provisioning protocol is referred to as the CREDS protocol (not to be
            confused with the EAP-CREDS).
        </t>
    </section>

    <section anchor="scope" title="Scope Statement">
        <t>
            This document focuses on the definition of the EAP-CREDS method to convey
            credentials provisioning and managing messages between the client and the
            AAA server. Moreover, the document defines how to encode messages for the
            main IETF provisioning protocols.

            <vspace blankLines="1" />

            This document, however, does not provide specifications for how and where
            the credentials are generated. In particular, the credentials could be
            generated directly within the AAA server or at a different location (i.e., the
            Certificate Service Provider or CSP) site. Different authentication
            mechanisms (e.g., TLS, etc.) can be used to secure the communication
            between the server's endpoint and the CSP.
        </t>
    </section>

    <section title="EAP-CREDS Protocol">
        <t>
            This section outlines the operation of the protocol and message flows.
            The format of the CREDS messages is given in <xref target="creds_msg" />.
        </t>

        <section anchor="tunnel" title="EAP-CREDS as tunneled mechanism only">
          <t>
            EAP-CREDS requires that an outer mechanism is in place between the Peer and
            the Server in order to provide authentication and confidentiality of the
            messages exchanged via EAP-CREDS. This choice was taken to simplify the
            message flow and abstract EAP-CREDS from the secure-channel establishment
            mechanism.
          </t>
          <t>
            In other words, the method assumes that an appropriate protection outer
            layer has been established to prevent the possibility to leak information
            or to allow man-in-the-middle attacks.
          </t>
        </section>

        <section title="Message Flow">
            <t>
                EAP-CREDS message flow is logically subdivided into three different
                phases:
                <list style="hanging">
                    <t hangText="Phase One (Required).">
                        CREDS Initialization. During this phase the Peer and the Server
                        exchange the information needed to select the appropriate
                        credentials management protocol. In particular, the Sever sends
                        its initial message of type ('Init') with the details about what
                        protocols are supported, and additional information such as the
                        version of EAP-CREDS and the supported profiles identifiers.
                    </t>
                    <t hangText="Phase Two (Required).">
                        Provisioning Protocol Flow. In this phase, the Peer and the Server
                        exchange the provisioning protocol's messages encapsulated in a
                        EAP-CREDS message of type ProtoFlow. The messages contain only two
                        TLVs: the first one (optional) carries information that might be
                        normally coveyed via the transport protocol (e.g., HTTP headers),
                        while the second one (required) carries the provisioning protocol's
                        messages.
                    </t>
                    <t hangText="Phase Three (Optional).">
                        Credentials Validation. This optional phase can be initiated by
                        the server and it is used to validate that the Peer has properly
                        installed the credentials and can use them to authenticate
                        itself. Depending on the credentials' type, the messages can
                        carry a challenge/nonce, the value of the secret/token, or other
                        information. The format of the credentials is supposed to be
                        known by the provider and the device.
                    </t>
                </list>
            </t>
          </section>
          <section anchor="creds_phase_one" title="Phase One: Initialization">

            <t>
              The following figure provides the message flow for Phase One:
            </t>
            <figure><artwork><![CDATA[

+------------+                                  +--------------+
|  EAP Peer  |                                  |  EAP Server  |
+------------+                                  +--------------+
    |                                                  |
    |<----------- Outer Tunnel Established ----------->|
    |                                                  |
    |                                                  |  Phase One      
    |                                                  |  Begins
    |<----------[1] EAP-Request/EAP-CREDS -------------|      .
    |       (Type=Init,Ver,Supported Protocols,        |      :
    |                   Providers)                     |      |
    |                                                  |      |
    |-----------[2] EAP-Response/EAP-CREDS ----------->|      |
    |         (Type=Init,Ver,Proto,Provider)           |      v
    |                                                  |      |
    |<-----------[3] EAP-Request/EAP-CREDS ------------|      |
    |             (Type=Init, << Empty >>)             |      v
    |                                                  |  Phase One
    :                                                  :  Ends
    .                                                  .

]]></artwork></figure>
            <t>
                During the CREDS initialization, after the establishment of the outer
                mechanism (e.g., EAP-TLS, EAP-TEAP, EAP-TTLS, etc.), the initial the
                server sends the EAP-Request/EAP-CREDS(Type=Init) message with the
                ('Versions') TLV to indicate the supported versions of EAP-CREDS (i.e.
                a list of all supported version of EAP-CREDS), the ('Supported-Protocol')
                TLV to indicate the list of supported provisioning protocols, followed
                by the ('Providers') TLVs that allow the client to pick the credentials' vendor.
            </t>
            <t> 
                The peer selects the version, the protocol, and optionally the provider,
                and sends back the response in a EAP-Response/EAP-CREDS(Type=Init)
                message to the server which includes the ('Versions'), ('Protocols'),
                and optionally the ('Providers') TLVs with only one value each. If
                multiple values are detected in the message from the Peer, the message
                shall be discarded and the appropriate error message shall be issued by
                the Server.
            </t>
            <t>
                The server checks that the requested protocol and parameters are
                supported and, if not (or if the server detects an error), it sends an
                error message to the peer and notify the outer (tunneling) layer. 
            </t>
            <t>
                In case the server can serve the request from the client, it sends
                an empty EAP-Request/EAP-CREDS(Type=Init) message to indicate that
                the server is ok with the selected parameters and is waiting on
                the Peer to start Phase Two of the protocol.
            </t>
          </section>
          <section anchor="creds_phase_two" title="Phase Two: Provisioning">
            <t>
              The following figure provides the message flow for Phase 2:
            </t>
            <figure><artwork><![CDATA[

+------------+                                  +--------------+
|  EAP Peer  |                                  |  EAP Server  |
+------------+                                  +--------------+
    |                                                  |
    :                                                  :
    .                                                  .
    |                                                  |  Phase Two
    |                                                  |  Begins
    |------------ EAP-Response/EAP-CREDS ------------->|      .
    |      (Type=ProtoFlow,ProtoData)                  |      |
    |                                                  |      |
    |<----------- EAP-Request/EAP-CREDS ---------------|      |
    |      (Type=ProtoFlow,ProtoData)                  |      |
    |                                                  |      |
    :                                                  :      :
    .                                                  .      .
    :                                                  :      :
    |                                                  |      |
    |                                                  |      |
    |------------ EAP-Response/EAP-CREDS ------------->|      v
    |      (Type=ProtoFlow,EMPTY)                      |  Phase Two
    |                                                  |  Ends
    :                                                  :

]]></artwork></figure>
            <t>
                The server starts phase two of the EAP-CREDS protocol by sending an
                EAP-Request/EAP-CREDS(Type=ProtoFlow) message with the selected 
                protocol's details to the Peer. This indicates that the Server is
                ready to initiate the provisioning protocol.
            </t>
            <t>
                Specifically, the Server MUST include the 'Ver' and 'Proto' TLVs
                to indicate the EAP-CREDS version agreed upon by the parties and the
                specific provisioning protocol to use. The 'provider' TLV is optional
                and MUST be included if a selection was made by the Peer. The 'provider'
                TLV MAY be included in the message even if the Peer did not make a
                selection.
            </t>
            <t>
                After that, the Peer sends its first message to the Server by sending the
                EAP-Response/EAP-CREDS(Type=ProtoFlow) message. This message contains
                the selected provisioning protocol's message data and some extra fields
                (e.g., transport-protocol headers).
            </t>
            <t>
                The Server replies to the Peer's message with EAP-Request/EAP-CREDS(Type=ProtoFlow)
                messages until the provisioning protocol reaches an end (the client will
                send a 'ProtoFlow' message with an empty body) or an error condition (the
                party that detected the error condition will use a 'ProtoFlow' message with
                an 'Error' TLV to convey the issue and terminate the protocol).
            </t>
            <t>
                The communication between the client and the server
                continues until the selected protocol and action is correctly performed
                or a failure is detected and reported.
            </t>
          </section>
          <section anchor="creds_phase_three" title="Phase Three: Validation">
            <t>
              The following figure provides the message flow for Phase 3:
            </t>
            <figure><artwork><![CDATA[

+------------+                                  +--------------+
|  EAP Peer  |                                  |  EAP Server  |
+------------+                                  +--------------+
    |                                                  |
    :                                                  :
                                                                                                        
    .                                                  .  
    |                                                  |  Phase Three
    |<----------- EAP-Request/EAP-CREDS ---------------|    Begin
    |      (Type=Validate,Challenge)                   |      .
    |                                                  |      |
    |                                                  |      |
    |------------ EAP-Response/EAP-CREDS ------------->|      |
    |      (Type=Validate,ExtraChallenge,              |      |
    |       ChallengeResponse,Challenge)               |      |
    :                                                  :      :
    .                                                  .      :

    :                                                  :      :
    :                                                  |      |
    |                                                  |      |
    |<----------- EAP-Request/EAP-CREDS ---------------|      |
    |      (Type=Validate,ChallengeResponse)           |      |
    |                                                  |      |
    |------------ EAP-Request/EAP-CREDS -------------->|      |
    |      (Type=Validate,EMPTY)                       |      v
    |                                                  |  Phase Three
    |                                                  |  Ends
    |                                                  |
    |<----------- EAP-Success -------------------------|  EAP Success
    |                                                  |

]]></artwork></figure>
            <t>
              Phase three is optional and it is used by the server to request the client to
              validate (proof) that the new credentials have been installed correctly
              before issuing the final Success message.
            </t>
            <t>
              In order to do that, the server and the client exchange two or three
              EAP-Request/EAP-CREDS(Type=Validate) and EAP-Response/EAP-CREDS(Type=Validate)
              messages where the correctness of the exchanged credentials is verified by
              the server and (optionally) by the client.
            </t>
            <t>
              In particular, when the client receives the first Validate message from the
              server, it calculates the response to the challenge (based on the type of
              credentials and the protocol itself - if supported, this would be a 'test'
              authentication) and sends the response back to the server.
            </t>
            <t>
              Optionally, the client can add the ExtraChallenge TLV that carries the extra
              challenge information that was used to calculate the ChallengeResponse TLV
              (if any). This field can be used to prevent the use of the Validate phase
              as an encryption or validation oracle.
            </t>
            <t>
              Optionally, the client can add the Challent TLV to the response. When the
              server receives the EAP-Response/EAP-CREDS(Type=Validate) with the Challenge
              TLV in it, it MUST calculate the response to the challenge and send back the
              response to the client in an EAP-Request/EAP-CREDS(Type=Validate) with the
              ChallengeResponse TLV and, optionally, the ExtraChallenge TLV.
            </t>
            <t>
              In case of issues with the validation of the newly deployed credentials, both
              the client and the server should consider those credentials invalid (or
              unusable) and should issue the required failure message(s).
            </t>

        </section>
    </section>

    <section anchor="creds_msg" title="EAP-CREDS Message Format">
        <t>
            The EAP-CREDS defines the following message types:
            <list>
                <t>EAP-CREDS/Init</t>
                <t>EAP-CREDS/ProtoFlow</t>
                <t>EAP-CREDS/Validate</t>
            </list>
        </t>
        <t>
            Each of these message types have the basic structure as identified in <xref target="creds_header" />
            and in <xref target="creds_msg_payload" /> and contain zero, one, or more TLVs. The allowed TLVs for
            the different types of messages are described in <xref target="creds_msg_types" />.
            The internal structure of the different types of TLVs is described in <xref target="creds_msg_tlv_def" />.
        </t>

      <section anchor="creds_header" title="Message Header">
        <t>
            The EAP-CREDS messages consist of the standard EAP header (see Section 4
            of <xref target="RFC3748" />), followed by the version of the EAP-CREDS
            (4 bits) and a field (4 bits) reserved for future use.
            The header has the following structure:
        </t>
        <figure><artwork><![CDATA[

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Code      |  Identifier   |             Length            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Type      | Flags |  Ver  |         Message Length        |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |         Message Length        |               Data           ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-.

]]></artwork></figure>

        <t>
          Where the Code, Identifier, Length, and Type fields are all part of the EAP
          header as defined in <xref target="RFC3748" />.
        </t>
        <t>
          The Type field in the EAP header is &lt;TBD&gt; for EAP-CREDS.
        </t>
        <t>
          The Ver (Version) bitfield (4 bits) identifies the version of the
          EAP-CREDS protocol used for the exchange.
          This document defines the value to use for this field as '0x1' (0001).
        </t>
        <t>
          The Flags bitfield (4 bits) is currently not used and it is reserved
          for future use. The value of the bitfield shall be ignored when the
          Version ('Ver') field is set to '0x1' (0001).
        </t>
      </section>

      <section anchor="creds_msg_payload" title="Message Payload">
        <t>
          The Data part of the message is organized as zero, one, or more TLV
          objects whose structure is defined in this section. In particular,
          the general structure of a TLV is described in <xref target="creds_msg_tlv_def" />,
          while the specific structures for the supported TLVs is provided
          in <xref target="creds_tlvs_types" />.
        </t>

      <section anchor="creds_msg_tlv_def" title="General TLV format">
        <t>
          Each TLV object has the same basic structure that is defined as follows:
        </t>
<figure><artwork><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                TLV Type       |            Length             |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                               |          Value...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>
          <t>Where:</t>
          <t>TLV-Type
            <list>
              <t>
                This field is used to indicate the type of data that the TLV
                carries. The different types of TLVs are described in <xref target="creds_tlvs_types" />.
              </t>
            </list>
          </t>
          <t>Length
            <list>
              <t>
                This field carries the size of the value of the TLV. In particular,
                the overall size of a TLV (i.e., the header plus the value) can be
                calculated by adding the size of the header (6 octects) to the value
                of the Length field (i.e., the size of the TLV's value).
              </t>
            </list>
          </t>
          <t>TLV Type
            <list>
                <t>
                    This field carries the type of TLV which determines its internal
                    structure. The supported values for this fields are provided in
                    the following table:
                </t>
            </list>
          </t>
          <texttable anchor="eap_creds_tlvs_table" title="EAP-CREDS Supported TLVs Types">
          <ttcol align="center">Message Type</ttcol>
          <ttcol align="left">Purpose</ttcol>
          <c>0</c>
          <c>Error TLV</c>
          <c>1</c>
          <c>EAP-CREDS Version TLV</c>
          <c>2</c>
          <c>Provisioning Protocol TLV</c>
          <c>3</c>
          <c>Provisioning Provider TLV</c>
          <c>4</c>
          <c>Provisioning Protocol Header TLV</c>
          <c>5</c>
          <c>Provisioning Protocol Data TLV</c>
          <c>6</c>
          <c>Credentials Information TLV</c>
          <c>7</c>
          <c>Authorization Token TLV</c>
          <c>8</c>
          <c>Registration Token TLV</c>
          <c>9</c>
          <c>Challenge TLV</c>
          <c>10</c>
          <c>Challenge Response TLV</c>
          </texttable>

      </section>

      <section anchor="creds_tlvs_types" title="EAP-CREDS defined TLVs">
      <t>
        EAP-CREDS messages's payload comprieses zero, one, or more TLVs that are encoded
        in a single EAP-CREDS message.
        The values for the TLV Type that are supported by this specifications are listed
        in <xref target="eap_creds_tlvs_table" />.
      </t>

      <t>
        This section describes the structure of the different
        supported TLVs and their usage in the different messages.
      </t>

    <section anchor="tlv_protocols" title="The Protocol TLV">

      <figure><artwork><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |           TLV Type            |            Length             |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Protocol ID (uint16)      |        Protocol Version       |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>
    <t>TLV Type
        <list>
            <t>&lt;TBD&gt; - Provisioning Protocol TLV</t>
        </list>
    </t>
    <t>Length
        <list>
            <t>4 octets</t>
        </list>
    </t>
    <t>Protocol ID
        <list>
            <t>
                The Protocol ID field is 2 octets. The allowed values
                for this field are maintained in a subdirectory by IANA.
                The initial values for the provisioning protocol identifiers
                can be found in <xref target="iana_proto" />.
            </t>
        </list>
    </t>
    <t>Protocol Version
        <list>
            <t>
                The Protocol Version field is 2 octet (uint16). When no
                version is specified for a protocol (i.e., either it does
                not support multiple versions or it does not matter), the
                value should be set to '0x0'.
            </t>
        </list>
    </t>
    </section>

    <section anchor="tlv_profiles" title="The Profiles TLV">
      <t>
      </t>
    </section>

    <section anchor="tlv_credinfo" title="The CredInfo TLV">
      <t>
        Type (Int; 1Byte) | HashAlgoId (Int; 1 byte) |
        Installed On (GMT; 15 bytes) | ExpiresOn (GMT; 15 bytes) |
        Salt/Nonce (RND; 32 bytes) | id_len (Int; 2 bytes) | id_value |
        cred_hash_len (Int; 2 bytes) | Cred_Hash (Binary; 20-64 bytes)
      </t>
      <figure><artwork><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |M|S|            TLV Type       |            Length             |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                           32 bit Integer                      |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

    </section>

    <section anchor="tlv_auth_token" title="The AuthToken TLV">
      <t>
      </t>
    </section>

    <section anchor="tlv_challenge" title="The Challenge TLV">
      <t>
      </t>
    </section>

    <section anchor="tlv_challenge_response" title="The ChallengeResponse TLV">
      <t>
      </t>
    </section>

    <section anchor="tlv_errors" title="The Error TLV">
      <t>
      </t>
    </section>

  </section>

  </section>

    </section>

    <section anchor="creds_msg_types" title="EAP-CREDS Messages">
        <t>
            This section describes each message and what TLVs are allowed or required.
            EAP-CREDS defines the following values for the Message Type (Type):
        </t>
        <texttable anchor="eap_creds_msgs_table" title="EAP-CREDS Message Types">
          <ttcol align="center">Message Type</ttcol>
          <ttcol align="left">Name</ttcol>
          <ttcol align="left">Description</ttcol>
          <c>0</c>
          <c>EAP-CREDS-Init</c>
          <c>Initialization Phase</c>
          <c>1</c>
          <c>EAP-CREDS-ProtoFlow</c>
          <c>Carries Provisioning Protocol Messages</c>
          <c>2</c>
          <c>EAP-CREDS-Validate</c>
          <c>Validates newly installed credentials</c>
        </texttable>

        <section anchor="creds_msg_init" title="The EAP-CREDS-Init Message">
            <t>
                The EAP-CREDS-Init message type is used in Phase One only of EAP-CREDS. The
                message flow is depicted in <xref target="creds_phase_one" />. This message
                supports the following TLVs: Version, ProvProto, CredsInfo,
                and IdProvider.
            </t>
            <t>
                In this section we specify how these TLVs are used in the phase-one
                messages.
            </t>

            <section anchor="creds_msg_init_ver_tlv" title="Version TLV usage">
                <t>
                    The Version TLV is used to convey the version of EAP-CREDS to be
                    used for the current session.
                </t>
                <t>
                    The Server uses one or more Version TLVs in the EAP-Request/EAP-CREDS(Type=Init)
                    message to provide the Peer with the list of EAP-CREDS versions supported. At
                    minimum, the Server must include one Version TLV with the value of '0x1'.
                    If the Server detects multiple occurrences of this TLV in the reply from the Peer,
                    an error shall be issued and the EAP-CREDS should abort.
                </t>
                <t>
                    The Peer, on the other hand, MUST include only one Version TLV
                    in the EAP-Response/EAP-CREDS(Type=Init) message to indicate the
                    version of EAP-CREDS that the client wants to use for the
                    session. The Peer MUST pick from the list provided in the message from
                    the server and, if no common version is supported by the client, then
                    the client shall send an error message (i.e., an EAP-Response/EAP-CREDS(Type=Init)
                    with at least one EAP-CREDS-Err TLV).
                </t>
            </section>

            <section anchor="creds_msg_init_proto_tlv" title="The ProvProto TLV usage">
                <t>
                    The ProvProto TLV is used to idicate which provisioning protocols are
                    are supported by the peer and the server.
                </t>
                <t>
                    The Server uses one or more ProvProto TLVs in the EAP-Request/EAP-CREDS(Type=Init)
                    message to provide the Peer with the list of supported provisioning protocol. At
                    minimum, the Server must include one ProvProto TLV with the Simple Provisioning
                    Protocol value (SSP MUST be supported by EAP-CREDS servers). If the Server detects
                    multiple occurrences of this TLV in the reply from the Peer, an error shall be issued
                    and the EAP-CREDS should abort.
                </t>
                <t>
                    The Peer, on the other hand, MUST include only one ProvProto TLV
                    in the EAP-Response/EAP-CREDS(Type=Init) message to indicate the
                    protocol it intends to use in phase two.
                    The Peer MUST pick from the list provided in the message from
                    the server and, if no common protocol is supported by the client, then
                    the client shall send an error message (i.e., an EAP-Response/EAP-CREDS(Type=Init)
                    with at least one EAP-CREDS-Err TLV).
                </t>
            </section>

            <section anchor="creds_msg_init_info_tlv" title="The CredsInfo TLV usage">
                <t>
                    The CredsInfo TLV is used by the peer to convey information to the EAP-CREDS
                    server about the installed (if any) credentials for the network being accessed.
                </t>
                <t>
                    The Server does not use this TLV in its EAP-CREDS-Init messages.
                </t>
                <t>
                    The Peer, on the other hand, MUST include one CredsInfo TLV for each
                    installed credentials (that the network is authorized to manage) in the
                    EAP-Response/EAP-CREDS(Type=Init) message. If no credentials are available,
                    yet, then the client SHALL NOT include this TLV in its EAP-CREDS-Init message.
                </t>
            </section>

            <section anchor="creds_msg_init_provider_tlv" title="The IdProvider TLV">
                <t>
                    The IdProvider TLV is used to convey the list of supported providers that can be
                    used for managing credentials (e.g., a list of identity providers).
                </t>
                <t>
                    The Server uses one or more IdProvider TLVs in the EAP-Request/EAP-CREDS(Type=Init)
                    message to provide the Peer with the list of supported credentials providers. The server
                    can omit the set of TLVs in case a single provider is supported (or if the selection of the
                    provider is done based on different factors - e.g., the authenticated credentials via
                    the tunneling mechanism).
                </t>
                <t>
                    The Peer, on the other hand, MAY include only one IdProvider TLV
                    in the EAP-Response/EAP-CREDS(Type=Init) message to indicate which provider
                    it wants the Server to use. The Peer MUST pick from the list provided in the
                    message from the server. If the client does not support any of the providers
                    listed in the Server's message or if no selection is provided and the Peer
                    requires a specific provider, then an EAP-Response/EAP-CREDS(Type=Init) with
                    an EAP-CREDS-Err TLV MUST be sent to the server as a response.
                </t>
            </section>

        </section>

        <section anchor="creds_msg_protoflow" title="The EAP-CREDS-ProtoFlow Message">
            <t>
                The EAP-CREDS-ProtoFlow message type is used in Phase Two only of EAP-CREDS. The
                message flow is depicted in <xref target="creds_phase_two" />. This message type
                supports the following TLVs: ProvProtoHeaders and ProvProtoData.
            </t>
            <t>
                In this section we specify how these TLVs are used in the phase-one
                messages.
            </t>

            <section anchor="creds_msg_protoflow_headers_tlv" title="The ProvProtoHeader TLV">
                <t>
                    The ProvProtoHeader TLV is used to convey one or more headers (or extra
                    information) that add relevant information for the provisioning protocol.
                </t>
                <t>
                    Both on the Peer and on the Server, this TLV should be used to, for example,
                    provide HTTP headers that might be required for some provisioning protocols
                    that do not properly abstract from the transport layer (e.g., ACME and EST
                    are examples of this type of protocols).
                </t>
            </section>

            <section anchor="creds_msg_protoflow_data_tlv" title="The ProvProtoData TLV">
                <t>
                    The ProvProtoData TLV is used to transport the body of the messages
                    for the provisioning protocol across the Peer and the Server.
                </t>
                <t>
                    Both on the Peer and on the Server, this TLV is used to carry the provisioning
                    protocol's messages. In particular, the protocols' messages are encapsulated
                    in this TLV without further re-encoding of the message. Only one instance of
                    this TLV is allowed in EAP-CREDS-ProtoFlow messages.
                </t>
            </section>

        </section>

        <section anchor="creds_msg_validate" title="The ('Validate') Message">
        </section>

    </section>

  <section anchor="err_handling" title="Error Handling in EAP-CREDS">
    <t>
      This section provides a description of the error handling by
      using the CREDS-Error-TLV in a CREDS message.
    </t>
  </section>

  <section anchor="frag" title="Fragmentation">
    <t>
      Although EAP does not directly support handling of fragmented packets,
      EAP-CREDS requires that its messages are encapsulated via an outer
      method that MUST provide fragmentation support.
    </t>
    <t>
      Because of the outer method requirements in particular, removing any
      support for fragmented messages in EAP-CREDS removes the duplication
      of packets (e.g., Acknowledgment Packets) sent across the Peer and
      the Server, thus resulting in a smaller number of exchanged messages
    </t>
  </section>

        <section anchor="teap_creds" title="Using EAP-CREDS with EAP-TEAP">
            <figure><artwork><![CDATA[
   +--------+             +-------------+
   | Client |             |     AAA     |
   +--------+             +-------------+
       |                         |
       |  ClientHello            |
       |------------------------>|
       |  ServerHello,           |
       |  Certificate(1),        |
       |  ServerKeyExchange,     |
       |  CertificateRequest(2), | 
       |  ServerHelloDone,       | 
       |<------------------------|
       |  Certificate(3),        |
       |  ClientKeyExchange,     |
       |  CertificateVerify,     |
       |  ChangeCipherSpec,      |
       |  Finished               |
       |------------------------>|
       |  ChangeCipherSpec,      |
       |  Finished               |
       |<------------------------|
       //                        //
       // <---- EAP-CREDS ---->  //
       //                        //
       |  Crypto-Binding TLV     |
       |<------------------------|
       |  Crypto-Binding TLV     |
       |------------------------>|
       |  Result TLV             |
       |<------------------------|
       |  Result TLV             |
       |------------------------>|
       |      EAP-Success        |
       |<------------------------|

            ]]></artwork></figure>
            <!--
            In particular, clients using OCSP-over-DNS, SHOULD:
            <list style="numbers">
                <t> 
                    Lookup the OCSP URI provided in the AIA of the certificate to be checked.
                    The format of the URI comprises the id-ad-ocsp identifier and a base URL
                    where the scheme (``dns://'') is used.
                    The format of the full URI is discussed in <xref target="uri" />.
                </t>
                <t>
                    Retrieve the DNS record carrying the required OCSP response.
                </t>
            </list>
            -->
        </section>

        <section anchor="ttls_creds" title="Using EAP-CREDS with EAP-TTLS">
            <figure><artwork><![CDATA[
   +--------+             +-------------+
   | Client |             |     AAA     |
   +--------+             +-------------+
       |                         |
       |  ClientHello            |
       |------------------------>|
       |  ServerHello,           |
       |  Certificate(1),        |
       |  ServerKeyExchange,     |
       |  CertificateRequest(2), | 
       |  ServerHelloDone,       | 
       |<------------------------|
       |  Certificate(3),        |
       |  ClientKeyExchange,     |
       |  CertificateVerify,     |
       |  ChangeCipherSpec,      |
       |  Finished               |
       |------------------------>|
       |  ChangeCipherSpec,      |
       |  Finished               |
       |<------------------------|
       :                         :
       //                        //
       // <---- EAP-CREDS ---->  //
       //                        //
       :                         :
       |      EAP-Success        |
       |<------------------------|

]]></artwork></figure>
    </section>

    <section anchor="eap_creds_creds" title="EAP-CREDS and Simple Provisioning Protocol (SPP)">
      <t>
        EAP-CREDS supports a Simple Provisioning Protocol (SPP) which comprises a series of
        messages that enables the management not only of certificates, but also of other types
        of credentials like username/password pairs, asymmetric keys, and symmetric keys.
      </t>
      <t>
        EAP-CREDS/SSP defines the following flow of messages for requesting the provisioning
        of credentials. 
      </t>
    </section>

    <section anchor="iana" title="IANA Considerations">
        <t>
            This document uses a new EAP type, EAP-CREDS, whose value (TBD) MUST be allocated by IANA from
            the EAP TYPEs subregistry of the RADIUS registry.
            This section provides guidance to the Internet Assigned Numbers Authority (IANA) regarding
            registration of values related to the EAP-CREDS protocol, in accordance with <xref target="RFC8126" />.
        </t>

        <t>
            The EAP Method Type number for EAP-CREDS needs to be assigned.
        </t>

        <t>
            This document also requires IANA to create new registries as defined in
            the following subsections.
        </t>

        <section anchor="iana_proto" title="Provisioning Protocols">

            <texttable anchor="iana_proto_table" title="EAP-CREDS Inner Protocol Identifiers">
                <ttcol align="center">Message Type</ttcol>
                <ttcol align="left">Purpose</ttcol>
                <c>0</c>
                <c>Unspecified</c>
                <c>1</c>
                <c>Simple Provisioning Protocol (SPP)</c>
                <c>2</c>
                <c>Basic Certificate Management Protocol (CMP-S)</c>
                <c>3</c>
                <c>Full Certificate Management Protocol (CMP-F)</c>
                <c>4</c>
                <c>Enrollment over Secure Transport (EST)</c>
                <c>5</c>
                <c>Certificate Management over CMS (CMC)</c>
                <c>6</c>
                <c>Automatic Certificate Management Environment (ACME)</c>
                <c>...</c>
                <c>...</c>
                <c>49141 ... 65534</c>
                <c>Vendor Specific</c>
            </texttable>

            <t>
                Assignment of new values for new cryptosuites MUST be done through
                IANA with "Specification Required" and "IESG Approval" as defined
                in <xref target="RFC8126" />.
            </t>

        </section>

        <section anchor="iana_token" title="Token Types">

            <texttable anchor="iana_token_table" title="Token Types">
                <ttcol align="center">Token Type</ttcol>
                <ttcol align="left">Description</ttcol>
                <c>0</c>
                <c>Unspecified</c>
                <c>1</c>
                <c>JWT</c>
                <c>2</c>
                <c>Kerberos</c>
                <c>3</c>
                <c>OAuth</c>
                <c>200..254</c>
                <c>Vendor Specific</c>
            </texttable>

            <t>
                Assignment of new values for new Message Types MUST be done through
                IANA with "Expert Review" as defined in <xref target="RFC8126" />.
            </t>

        </section>

    </section>

    <section anchor="security" title="Security Considerations">
        <t>
            Several security considerations need to be explicitly considered for the system administrators
            and application developers to understand the weaknesses of the overall architecture.
        </t>
        <t>
          As part of the TLS negotiation, the server presents a certificate to
          the peer.  The peer SHOULD verify the validity of the EAP server
          certificate and SHOULD also examine the EAP server name presented in
          the certificate in order to determine whether the EAP server can be
          trusted.  When performing server certificate validation,
          implementations MUST provide support for the rules in <xref target="RFC5280" /> for
          validating certificates against a known trust anchor.
      </t>

    </section>

    <section anchor="acks" title="Acknowledgments">
        <t>
            The authors would like to thank everybody who provided insightful comments and helped in the
            definition of the deployment considerations.
        </t>
    </section>

</middle>

<back>
<references title='Normative References'>

    &rfc2119;
    &rfc3748;
    <!-- &rfc3986; -->
    <!-- &rfc4501; -->
    &rfc4210;
    <!-- &rfc5019; -->
    <!-- &rfc5234; -->
    &rfc5272;
    &rfc5280;
    &rfc6402;
    &rfc7030;
    &rfc7170;
    &rfc8126;

</references>

<!--
<references title='Informative References'>

&ietf-acme-acme;

</references>
-->

<section anchor="ann_examples" title="EAP-CREDS Example Message Flow for Provisioning Standards">

  <section title="EAP-CREDS and CMP">
      <t>
          Describe how to use EAP-CREDS with CMP.
      </t>
  </section>

  <section title="EAP-CREDS and EST">
      <t>
          Describe how to use EAP-CREDS with EST.
      </t>
  </section>

  <section title="EAP-CREDS and CMS">
      <t>
          Describe how to use EAP-CREDS with CMS.
      </t>
  </section>

  <section title="EAP-CREDS and ACME">
      <t>
          Describe how to use EAP-CREDS with ACME.
      </t>
  </section>
</section>

</back>
</rfc>



